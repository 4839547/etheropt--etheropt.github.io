{"Market":{"code":"0x606060405260008054600160a060020a0319167318e79a47d8a58bef5aaecbba85ea1420649c64a8178155611e3a90819061003990396000f3606060405236156100fb5760e060020a600035046303406e7681146100fd578063155dd5ee146103925780631ce30927146103c057806322a421711461041e57806328e70c4e1461069d578063460c1a7a146106e55780635dbbfc471461082a5780636d5433e61461091f578063711b48711461093957806371ada3fb14610bcd57806372e18c1214610c055780637ae2b5c714610d3f578063a26759cb14610d5a578063a7033af514610d9b578063c803486b14610e73578063d392c5a214610ea4578063decebbce14610eac578063eddb00d414610eec578063edeb797c146110a2578063f3e0faba146110c1578063fe4667e9146112a5575b005b6113b4600435602435604080516020818101835260008083528351808301855281815284518084018652828152855193840186528284529451939490939092919081908190819081906003908059106101535750595b9080825280602002602001820160405250965060036040518059106101755750595b9080825280602002602001820160405250955060009450600093505b60038510156117a55750612710915060009050805b600160005060008c815260200190815260200160002060005060000160005060008b815260200190815260200160002060005060070160005054811015611800576000600160005060008d815260200190815260200160002060005060000160005060008c815260200190815260200160002060005060060160005060008381526020019081526020016000206000506001016000505411801561029d575082600160005060008d815260200190815260200160002060005060000160005060008c815260200190815260200160002060005060060160005060008381526020019081526020016000206000506000016000505411155b80156102cd575060008b81526001602090815260408083208d845282528083208484526006019091529020548490115b1561038a5760008b81526001602090815260408083208d845282528083208484526006019091529020548390101561035e57600091508150600160005060008c815260200190815260200160002060005060000160005060008b8152602001908152602001600020600050600601600050600082815260200190815260200160002060005060000160005054925082505b60008b81526001602081815260408084208e855282528084208585526006019091529091200154909101905b6001016101a6565b6100fb60043533600160a060020a031660009081526005602052604081205411156114895761148c33610e7a565b6004356000908152600160208181526040808420602435855282529283902091820154825484516003850154600295909501549181529283019390935281840152600160a060020a0391909116606082015290519081900360800190f35b6040805160248035600481810135602081810286810182019097528186526100fb96833596939560449501929182919085019084908082843750506040805196358089013560208181028a81018201909452818a529799986064989097506024929092019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a52979998608498909750602492909201955093508392508501908490808284375050604080519635808901356020818102808b018201909452818a5297999860a49890975060249290920195509350839250850190849080828437509496505050505050506001600080808080805b60008c8152600160208190526040909120015486101561150e576040600081812088825260205220600101548851600291908a908990811015610002579060200190602002015160405180838152602001828152602001925050506020604051808303816000866161da5a03f1156100025750506040518051906020015094506001858c88815181101561000257906020019060200201518c89815181101561000257906020019060200201518c8a81518110156100025790602001906020020151604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051808303816000866161da5a03f115610002575050604051805190602001509350600160005060008d8152602001908152602001600020600050600001600050600087815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031684600160a060020a031614151561069157600096505b6001959095019461051c565b6004356000908152600160209081526040808320600160a060020a03604435168452600301825280832060243584529091529020545b60408051918252519081900360200190f35b6100fb600080805b60025483101561184b57600091505b6001600050600084815260200190815260200160002060005060010160005054821015611850575060005b600083815260016020908152604080832085845290915290206005015481101561185c5733600160a060020a0316600160005060008581526020019081526020016000206000506000016000506000848152602001908152602001600020600050600401600050600083815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031614156108225760006001600050600085815260200190815260200160002060005060000160005060008481526020019081526020016000206000506004016000506000838152602001908152602001600020600050600101600050819055505b600101610727565b6106d36004355b600080808080805b600254841015611adc5760008481526001602052604081206002015460ff161415611aec57505060406000818120600160a060020a038816825260030160205290812060010154915081905b6001600050600085815260200190815260200160002060005060010160005054811015611ae75760016000506000858152602001908152602001600020600050600301600050600088600160a060020a03168152602001908152602001600020600050600001600050600082815260200190815260200160002060005054820191508150828212156109175781925082505b600101610885565b6106d3600435602435600081831115611af8575081610bff565b6113b46004356024356040805160208181018352600080835283518083018552818152845180840186528281528551938401865282845294519394909390929190819081908190819060039080591061098f5750595b9080825280602002602001820160405250965060036040518059106109b15750595b908082528060200260200182016040525095506000945061271093505b60038510156117a5575060009150819050805b600160005060008c815260200190815260200160002060005060000160005060008b8152602001908152602001600020600050600501600050548110156117b6576000600160005060008d815260200190815260200160002060005060000160005060008c8152602001908152602001600020600050600401600050600083815260200190815260200160002060005060010160005054118015610ad8575082600160005060008d815260200190815260200160002060005060000160005060008c815260200190815260200160002060005060040160005060008381526020019081526020016000206000506000016000505410155b8015610b08575060008b81526001602090815260408083208d845282528083208484526004019091529020548490105b15610bc55760008b81526001602090815260408083208d8452825280832084845260040190915290205483901115610b9957600091508150600160005060008c815260200190815260200160002060005060000160005060008b8152602001908152602001600020600050600401600050600082815260200190815260200160002060005060000160005054925082505b60008b81526001602081815260408084208e855282528084208585526004019091529091200154909101905b6001016109e1565b6106d36004356024356000828152600160208181526040808420600160a060020a038616855260030190915290912001545b92915050565b6100fb60043560243560443560643560008080808061271086068114610c2f576127108606909503945b600194505b848015610c415750600086115b156116f3576000199350600092505b60008981526001602090815260408083208b845290915290206005015483101561175157604060008181208582526004016020522054879010801590610ce957506000600160005060008b815260200190815260200160002060005060000160005060008a8152602001908152602001600020600050600401600050600085815260200190815260200160002060005060010160005054115b8015610d2857506000841280610d28575060008981526001602090815260408083208b8452825280832087845260040190915280822054858352912054115b15610d335782935083505b60019290920191610c50565b6106d36004356024355b600081831015611af8575081610bff565b6100fb33600160a060020a03166000908152600560205260408120548190111561143957604080822054825260036020528120600101805434019055611489565b6100fb6004356000805b6000838152600160208190526040909120015481101561184b575060005b600083815260016020908152604080832085845290915290206005015481101561198c57604060008181208382526004016020522060020154600160a060020a03908116339091161415610e6b5760006001600050600085815260200190815260200160002060005060000160005060008481526020019081526020016000206000506004016000506000838152602001908152602001600020600050600101600050819055505b600101610dc3565b6106d36004355b600160a060020a038116600090815260056020526040812054819011156114d5576114dd82610831565b6002546106d3565b6106d36004355b600160a060020a038116600090815260056020526040812054819011156114d557604080822054825260036020529020600101546110bc565b6100fb60043560243560443560643560008080808061271086068114610f16576127108606909503945b600194505b848015610f285750600086115b1561164a576000199350600092505b60008981526001602090815260408083208b84529091529020600701548310156116a857604060008181208582526006016020522054879011801590610fd057506000600160005060008b815260200190815260200160002060005060000160005060008a8152602001908152602001600020600050600601600050600085815260200190815260200160002060005060010160005054115b801561108b5750600084128061108b5750600160005060008a81526020019081526020016000206000506000016000506000898152602001908152602001600020600050600601600050600085815260200190815260200160002060005060000160005054600160005060008b815260200190815260200160002060005060000160005060008a8152602001908152602001600020600050600601600050600085815260200190815260200160002060005060000160005054105b156110965782935083505b60019290920191610f37565b6106d3600435600081815260016020819052604090912001545b919050565b604080516004803580820135602081810285810182019096528185526100fb9593946024949093850192918291908501908490808284375050604080518735808a013560208181028481018201909552818452989a99604499939850919091019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a529799986064989097506024929092019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a529799986084989097506024929092019550935083925085019084908082843750949650505050505050600080548190819081908190600160a060020a0390811633909116141561163f57600280546001818101835581845260205260408320918201805460ff19169055955093505b875183101561163f57505060018281018054918201905560008181526020849052604090208851899084908110156100025760209081029091010151815587518890849081101561000257602090810290910101516003820155865187908490811015610002576020908102909101015160018201558551869084908110156100025760209081029091010151600282018054600160a060020a0319169091179055600192909201916111f7565b6106d36004356024356044356064356084355b600080808080805b600254841015611abc576040600090812085825260016020526002015460ff161415611ad057600092506001600050600085815260200190815260200160002060005060030160005060008c600160a060020a031681526020019081526020016000206000506001016000505491508984141561133c57908601905b5090508060005b60008481526001602081905260409091200154811015611acb5760406000818120600160a060020a038e16825260030160209081528282208483529052205490910190898414801561139457508881145b1561139e57908701905b828212156113ac5781925082505b600101611343565b6040518080602001806020018381038352858181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018381038252848181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f15090500194505050505060405180910390f35b506004805460019081019182905560008281526003602090815260408083208054600160a060020a0319163390811782559401805434019055600160a060020a0393909316825260059052208190555b50565b81136114895733600160a060020a0316600081815260056020908152604080832054835260039091528082206001018054859003905551839082818181858883f1505050505050565b5060006110bc565b600160a060020a038316600090815260056020908152604080832054835260039091529020600101540190506110bc565b861561160257600095505b60008c815260016020819052604090912001548610156115e257600092505b60045483101561161057505060008a8152600160208181526040808420858552600380845282862054600160a060020a031686520190915282200154905b60008c8152600160208190526040909120015481101561161c57604060008181208582526003602081815284842054600160a060020a03168452910181528282208483529052205488518990839081101561000257602090810290910101510290910190600101611576565b60008c8152600160208190526040909120600201805460ff191690911790555b505050505050505050505050565b60019590950194611519565b600083815260036020526040902060010180548301905560019290920191611538565b505050505050505050565b600086111561163f57505050600095865250506001602081815260408087209587529481528486206005810180548085019091558752600401905292909320908155908101919091556002018054600160a060020a03191633179055565b60008412156116ba57600094506116ee565b60406000818120868252600601602052908120600101546116eb918b918b918b918b918a918190611bbe9085610d49565b95505b610f1b565b600086111561163f57505050600095865250506001602081815260408087209587529481528486206007810180548085019091558752600601905292909320908155908101919091556002018054600160a060020a03191633179055565b600084121561176357600094506117a0565b61179d898989898860008581526001602081815260408084208885528252808420858552600401909152822001548190611ca09085610d49565b95505b610c34565b509499939850929650505050505050565b60008311156117f457829350835082878681518110156100025760209081029091010152855182908790879081101561000257602090810290910101525b600194909401936109ce565b61271083101561183f57829350835082878681518110156100025760209081029091010152855182908790879081101561000257602090810290910101525b60019490940193610191565b505050565b600192909201916106ed565b5060005b600160005060008481526020019081526020016000206000506000016000506000838152602001908152602001600020600050600701600050548110156119805733600160a060020a0316600160005060008581526020019081526020016000206000506000016000506000848152602001908152602001600020600050600601600050600083815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031614156119785760006001600050600085815260200190815260200160002060005060000160005060008481526020019081526020016000206000506006016000506000838152602001908152602001600020600050600101600050819055505b600101611860565b600191909101906106fc565b5060005b60016000506000848152602001908152602001600020600050600001600050600083815260200190815260200160002060005060070160005054811015611ab05733600160a060020a0316600160005060008581526020019081526020016000206000506000016000506000848152602001908152602001600020600050600601600050600083815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a03161415611aa85760006001600050600085815260200190815260200160002060005060000160005060008481526020019081526020016000206000506006016000506000838152602001908152602001600020600050600101600050819055505b600101611990565b60019190910190610da5565b50929998505050505050505050565b938201935b600193909301926112c0565b509295945050505050565b938201935b60019390930192610839565b5080610bff565b01135b15611bb057600087815260016020818152604080842033600160a060020a039081168652600382018085528387208d885280865284882080548a0190559285528387208a8852600601855283872080549387018054612710958b028690049003905580870180548a90039055600281018054841689528287528589208f8a52875285892080548b90039055905490549092168752909352932090910180549184029290920401905592839003925b8391505b5095945050505050565b60008881526001602090815260408083208a8452825280832087845260060190915281205491925090611c029033908a908a908690612710828803909102046112b8565b611c0b33610eb3565b01138015611b025750600087815260016020908152604080832089845282528083208684526006019091528120805460029190910154611c6691600160a060020a0391909116908a908a9086860390612710908802046112b8565b60008981526001602090815260408083208b84528252808320888452600601909152902060020154611aff90600160a060020a0316610eb3565b60008881526001602090815260408083208a8452825280832087845260040190915281205491925090611ce39033908a908a9086860390612710908802046112b8565b611cec33610eb3565b01138015611d4b5750600087815260016020908152604080832089845282528083208684526004019091528120805460029190910154611e0091600160a060020a0391909116908a908a908690612710828803909102046112b8565b01135b15611bb057600087815260016020818152604080842033600160a060020a039081168652600382018085528387208d885280865284882080548a900390559285528387208a8852600401855283872080549387018054612710958b0286900401905580870180548a90039055600281018054841689528287528589208f8a52875285892080548b0190559054905490921687529093529320909101805491840292909204900390559283900392839150611bb4565b60008981526001602090815260408083208b84528252808320888452600401909152902060020154611d4890600160a060020a0316610eb356","info":{"source":"contract Market {\n\n  address admin = 0x18e79a47d8a58bef5aaecbba85ea1420649c64a8;\n\n  struct Order {\n    uint price;\n    uint size;\n    address user;\n  }\n  struct Option {\n    uint id;\n    bytes32 factHash;\n    address ethAddr;\n    uint strike;\n    mapping(uint => Order) buyOrders;\n    uint numBuyOrders;\n    mapping(uint => Order) sellOrders;\n    uint numSellOrders;\n  }\n  struct Position {\n    mapping(uint => int) positions;\n    int cash;\n  }\n  struct OptionChain {\n    mapping(uint => Option) options;\n    uint numOptions;\n    bool expired;\n    mapping(address => Position) positions;\n  }\n  mapping(uint => OptionChain) optionChains;\n  uint numOptionChains;\n  struct Account {\n    address user;\n    int capital;\n  }\n  mapping(uint => Account) accounts;\n  uint numAccounts;\n  mapping(address => uint) accountIDs;\n\n  function addFunds() {\n    if (accountIDs[msg.sender]>0) {\n      accounts[accountIDs[msg.sender]].capital += int(msg.value);\n    } else {\n      uint accountID = ++numAccounts;\n      accounts[accountID].user = msg.sender;\n      accounts[accountID].capital += int(msg.value);\n      accountIDs[msg.sender] = accountID;\n    }\n  }\n\n  function withdrawFunds(uint amount) {\n    if (accountIDs[msg.sender]>0) {\n      if (int(amount)<=getAvailableFunds(msg.sender)) {\n        accounts[accountIDs[msg.sender]].capital -= int(amount);\n        msg.sender.send(amount);\n      }\n    }\n  }\n\n  function getFunds(address user) constant returns(int) {\n    if (accountIDs[user]>0) {\n      return accounts[accountIDs[user]].capital;\n    } else {\n      return 0;\n    }\n  }\n\n  function getAvailableFunds(address user) constant returns(int) {\n    if (accountIDs[user]>0) {\n      return accounts[accountIDs[user]].capital + getMaxLoss(user);\n    } else {\n      return 0;\n    }\n  }\n\n  function expire(uint optionChainID, uint8[] v, bytes32[] r, bytes32[] s, uint256[] value) {\n    bool allSigned = true;\n    for (uint optionID=0; optionID<optionChains[optionChainID].numOptions; optionID++) {\n      var hash = sha256(optionChains[optionChainID].options[optionID].factHash, value[optionID]);\n      var signerAddress = ecrecover(hash, v[optionID], r[optionID], s[optionID]);\n      if (signerAddress != optionChains[optionChainID].options[optionID].ethAddr) {\n        allSigned = false;\n      }\n    }\n    if (allSigned) {\n      for (optionID=0; optionID<optionChains[optionChainID].numOptions; optionID++) {\n        for (uint accountID=0; accountID<numAccounts; accountID++) {\n          int result = optionChains[optionChainID].positions[accounts[accountID].user].cash;\n          for (uint j=0; j<optionChains[optionChainID].numOptions; j++) {\n            result += (int(value[j]) * optionChains[optionChainID].positions[accounts[accountID].user].positions[j]);\n          }\n          accounts[accountID].capital = accounts[accountID].capital + result;\n        }\n      }\n      optionChains[optionChainID].expired = true;\n    }\n  }\n\n  function addOptionChain(uint[] ids, uint[] strikes, bytes32[] factHashes, address[] ethAddrs) {\n    if (msg.sender==admin) {\n      var optionChainID = numOptionChains++;\n      OptionChain optionChain = optionChains[optionChainID];\n      optionChain.expired = false;\n      for (uint i=0; i < strikes.length; i++) {\n        var optionID = optionChain.numOptions++;\n        Option option = optionChain.options[optionID];\n        option.id = ids[i];\n        option.strike = strikes[i];\n        option.factHash = factHashes[i];\n        option.ethAddr = ethAddrs[i];\n      }\n    }\n  }\n\n  function getNumOptionChains() constant returns(uint) {\n    return numOptionChains;\n  }\n  function getNumOptions(uint optionChainID) constant returns(uint) {\n    return optionChains[optionChainID].numOptions;\n  }\n  function getOption(uint optionChainID, uint optionID) constant returns(uint, uint, bytes32, address) {\n    return (optionChains[optionChainID].options[optionID].id, optionChains[optionChainID].options[optionID].strike, optionChains[optionChainID].options[optionID].factHash, optionChains[optionChainID].options[optionID].ethAddr);\n  }\n  function getPosition(uint optionChainID, uint optionID, address user) constant returns(int) {\n    return optionChains[optionChainID].positions[user].positions[optionID];\n  }\n  function getCash(uint optionChainID, address user) constant returns(int) {\n    return optionChains[optionChainID].positions[user].cash;\n  }\n\n  function placeBuyOrder(uint optionChainID, uint optionID, uint price, uint size) {\n    if (size % 10000 != 0) {\n      size -= size % 10000;\n    }\n    bool foundMatch = true;\n    while (foundMatch && size>0) {\n      int256 bestPriceID = -1;\n      for (uint256 i=0; i<optionChains[optionChainID].options[optionID].numSellOrders; i++) {\n        if (optionChains[optionChainID].options[optionID].sellOrders[i].price<=price && optionChains[optionChainID].options[optionID].sellOrders[i].size>0 && (bestPriceID<0 || optionChains[optionChainID].options[optionID].sellOrders[i].price<optionChains[optionChainID].options[optionID].sellOrders[uint(bestPriceID)].price)) {\n          bestPriceID = int(i);\n        }\n      }\n      if (bestPriceID<0) {\n        foundMatch = false;\n      } else {\n        size = orderMatchBuy(optionChainID, optionID, price, size, uint(bestPriceID));\n      }\n    }\n    if (size>0) {\n      uint orderID = optionChains[optionChainID].options[optionID].numBuyOrders++;\n      Order order = optionChains[optionChainID].options[optionID].buyOrders[orderID];\n      order.price = price;\n      order.size = size;\n      order.user = msg.sender;\n    }\n  }\n\n  function placeSellOrder(uint optionChainID, uint optionID, uint price, uint size) {\n    if (size % 10000 != 0) {\n      size -= size % 10000;\n    }\n    bool foundMatch = true;\n    while (foundMatch && size>0) {\n      int256 bestPriceID = -1;\n      for (uint256 i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders; i++) {\n        if (optionChains[optionChainID].options[optionID].buyOrders[i].price>=price && optionChains[optionChainID].options[optionID].buyOrders[i].size>0 && (bestPriceID<0 || optionChains[optionChainID].options[optionID].buyOrders[i].price>optionChains[optionChainID].options[optionID].buyOrders[uint(bestPriceID)].price)) {\n          bestPriceID = int(i);\n        }\n      }\n      if (bestPriceID<0) {\n        foundMatch = false;\n      } else {\n        size = orderMatchSell(optionChainID, optionID, price, size, uint(bestPriceID));\n      }\n    }\n    if (size>0) {\n      uint orderID = optionChains[optionChainID].options[optionID].numSellOrders++;\n      Order order = optionChains[optionChainID].options[optionID].sellOrders[orderID];\n      order.price = price;\n      order.size = size;\n      order.user = msg.sender;\n    }\n  }\n\n  function orderMatchBuy(uint optionChainID, uint optionID, uint price, uint size, uint bestPriceID) private returns(uint) {\n    uint sizeChange = min(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size, size);\n    if (getFunds(msg.sender)+getMaxLossAfterTrade(msg.sender, optionChainID, optionID, int(sizeChange), int(-sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000))>0 && getFunds(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user)+getMaxLossAfterTrade(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user, optionChainID, optionID, int(-sizeChange), int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000))>0) {\n      size -= sizeChange;\n      optionChains[optionChainID].positions[msg.sender].positions[optionID] += int(sizeChange);\n      optionChains[optionChainID].positions[msg.sender].cash -= int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000);\n      optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size -= sizeChange;\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].positions[optionID] -= int(sizeChange);\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].cash += int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000);\n    }\n    return size;\n  }\n\n  function orderMatchSell(uint optionChainID, uint optionID, uint price, uint size, uint bestPriceID) private returns(uint) {\n    uint sizeChange = min(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size, size);\n    if (getFunds(msg.sender)+getMaxLossAfterTrade(msg.sender, optionChainID, optionID, int(-sizeChange), int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000))>0 && getFunds(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user)+getMaxLossAfterTrade(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user, optionChainID, optionID, int(sizeChange), int(-sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000))>0) {\n      size -= sizeChange;\n      optionChains[optionChainID].positions[msg.sender].positions[optionID] -= int(sizeChange);\n      optionChains[optionChainID].positions[msg.sender].cash += int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000);\n      optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size -= sizeChange;\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].positions[optionID] += int(sizeChange);\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].cash -= int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000);\n    }\n    return size;\n  }\n\n  function getOptionBuyOrders(uint optionChainID, uint optionID) constant returns(uint[], uint[]) {\n    uint[] memory buyPrices = new uint[](3);\n    uint[] memory buySizes = new uint[](3);\n    uint z = 0;\n    uint bestLevel = 10000;\n    while (z<3) {\n      uint watermark = 0;\n      uint size = 0;\n      for (uint i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders; i++) {\n        if (optionChains[optionChainID].options[optionID].buyOrders[i].size>0 && optionChains[optionChainID].options[optionID].buyOrders[i].price>=watermark && optionChains[optionChainID].options[optionID].buyOrders[i].price<bestLevel) {\n          if (optionChains[optionChainID].options[optionID].buyOrders[i].price>watermark) {\n            size = 0;\n            watermark = optionChains[optionChainID].options[optionID].buyOrders[i].price;\n          }\n          size += optionChains[optionChainID].options[optionID].buyOrders[i].size;\n        }\n      }\n      if (watermark>0) {\n        bestLevel = watermark;\n        buyPrices[z] = watermark;\n        buySizes[z] = size;\n      }\n      z = z + 1;\n    }\n    return (buyPrices, buySizes);\n  }\n\n  function getOptionSellOrders(uint optionChainID, uint optionID) constant returns(uint[], uint[]) {\n    uint[] memory sellPrices = new uint[](3);\n    uint[] memory sellSizes = new uint[](3);\n    uint z = 0;\n    uint bestLevel = 0;\n    while (z<3) {\n      uint watermark = 10000;\n      uint size = 0;\n      for (uint i=0; i<optionChains[optionChainID].options[optionID].numSellOrders; i++) {\n        if (optionChains[optionChainID].options[optionID].sellOrders[i].size>0 && optionChains[optionChainID].options[optionID].sellOrders[i].price<=watermark && optionChains[optionChainID].options[optionID].sellOrders[i].price>bestLevel) {\n          if (optionChains[optionChainID].options[optionID].sellOrders[i].price<watermark) {\n            size = 0;\n            watermark = optionChains[optionChainID].options[optionID].sellOrders[i].price;\n          }\n          size += optionChains[optionChainID].options[optionID].sellOrders[i].size;\n        }\n      }\n      if (watermark<10000) {\n        bestLevel = watermark;\n        sellPrices[z] = watermark;\n        sellSizes[z] = size;\n      }\n      z = z + 1;\n    }\n    return (sellPrices, sellSizes);\n  }\n\n  function cancelOrders() {\n    for (uint optionChainID=0; optionChainID<numOptionChains; optionChainID++) {\n      for (uint i=0; i<optionChains[optionChainID].numOptions; i++) {\n        for (uint j=0; j<optionChains[optionChainID].options[i].numBuyOrders; j++) {\n          if (optionChains[optionChainID].options[i].buyOrders[j].user==msg.sender) {\n            optionChains[optionChainID].options[i].buyOrders[j].size = 0;\n          }\n        }\n        for (j=0; j<optionChains[optionChainID].options[i].numSellOrders; j++) {\n          if (optionChains[optionChainID].options[i].sellOrders[j].user==msg.sender) {\n            optionChains[optionChainID].options[i].sellOrders[j].size = 0;\n          }\n        }\n      }\n    }\n  }\n\n  function cancelOrdersOnChain(uint optionChainID) {\n    for (uint i=0; j<optionChains[optionChainID].numOptions; i++) {\n      for (uint j=0; j<optionChains[optionChainID].options[i].numBuyOrders; j++) {\n        if (optionChains[optionChainID].options[i].buyOrders[j].user==msg.sender) {\n          optionChains[optionChainID].options[i].buyOrders[j].size = 0;\n        }\n      }\n      for (j=0; j<optionChains[optionChainID].options[i].numSellOrders; j++) {\n        if (optionChains[optionChainID].options[i].sellOrders[j].user==msg.sender) {\n          optionChains[optionChainID].options[i].sellOrders[j].size = 0;\n        }\n      }\n    }\n  }\n\n  function getMaxLossAfterTrade(address user, uint optionChainID, uint optionID, int positionChange, int cashChange) constant returns(int) {\n    int totalMaxLoss = 0;\n    for (uint i=0; i<numOptionChains; i++) {\n      if (optionChains[i].expired == false) {\n        int maxLoss = 0;\n        int pnl = optionChains[i].positions[user].cash;\n        if (i==optionChainID) {\n          pnl += cashChange;\n        }\n        maxLoss = pnl;\n        for (uint j=0; j<optionChains[i].numOptions; j++) {\n          pnl += optionChains[i].positions[user].positions[j];\n          if (i==optionChainID && j==optionID) {\n            pnl += positionChange;\n          }\n          if (pnl<maxLoss) {\n            maxLoss = pnl;\n          }\n        }\n        totalMaxLoss += maxLoss;\n      }\n    }\n    return totalMaxLoss;\n  }\n\n  function getMaxLoss(address user) constant returns(int) {\n    int totalMaxLoss = 0;\n    for (uint i=0; i<numOptionChains; i++) {\n      if (optionChains[i].expired == false) {\n        int maxLoss = 0;\n        int pnl = optionChains[i].positions[user].cash;\n        maxLoss = pnl;\n        for (uint j=0; j<optionChains[i].numOptions; j++) {\n          pnl += optionChains[i].positions[user].positions[j];\n          if (pnl<maxLoss) {\n            maxLoss = pnl;\n          }\n        }\n        totalMaxLoss += maxLoss;\n      }\n    }\n    return totalMaxLoss;\n  }\n\n  function min(uint a, uint b) constant returns(uint) {\n    if (a<b) {\n      return a;\n    } else {\n      return b;\n    }\n  }\n  function max(uint a, uint b) constant returns(uint) {\n    if (a>b) {\n      return a;\n    } else {\n      return b;\n    }\n  }\n}\n","language":"Solidity","languageVersion":"0.2.0","compilerVersion":"0.2.0","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /var/folders/sj/bz257rsj0w1g7cpjjycd7wpw0000gn/T/solc007182578","abiDefinition":[{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"}],"name":"getOptionSellOrders","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"}],"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"withdrawFunds","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"}],"name":"getOption","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"bytes32"},{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"v","type":"uint8[]"},{"name":"r","type":"bytes32[]"},{"name":"s","type":"bytes32[]"},{"name":"value","type":"uint256[]"}],"name":"expire","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"user","type":"address"}],"name":"getPosition","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":false,"inputs":[],"name":"cancelOrders","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getMaxLoss","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"max","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"}],"name":"getOptionBuyOrders","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"}],"type":"function"},{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"user","type":"address"}],"name":"getCash","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"price","type":"uint256"},{"name":"size","type":"uint256"}],"name":"placeSellOrder","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"min","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"addFunds","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"}],"name":"cancelOrdersOnChain","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getAvailableFunds","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[],"name":"getNumOptionChains","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getFunds","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"price","type":"uint256"},{"name":"size","type":"uint256"}],"name":"placeBuyOrder","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"}],"name":"getNumOptions","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"ids","type":"uint256[]"},{"name":"strikes","type":"uint256[]"},{"name":"factHashes","type":"bytes32[]"},{"name":"ethAddrs","type":"address[]"}],"name":"addOptionChain","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"},{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"positionChange","type":"int256"},{"name":"cashChange","type":"int256"}],"name":"getMaxLossAfterTrade","outputs":[{"name":"","type":"int256"}],"type":"function"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}}}