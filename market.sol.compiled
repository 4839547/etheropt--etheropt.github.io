{"Market":{"code":"0x606060405260008054600160a060020a0319167318e79a47d8a58bef5aaecbba85ea1420649c64a8178155612ad190819061003990396000f3606060405236156101275760e060020a600035046303406e7681146101295780630a2d31ad146103bf578063155dd5ee146105a15780631ce30927146105cf57806322a421711461062d57806328e70c4e146108b0578063460c1a7a146108f85780635dbbfc4714610a3e578063711b487114610b1f57806371ada3fb14610db457806372e18c1214610dec5780637ae2b5c714610e2e5780638f28397014610e49578063a26759cb14610e7c578063a7033af514610ebd578063c803486b14610f95578063d392c5a214610fc6578063d9548e5314610fce578063decebbce14610fef578063e54aae131461102f578063eddb00d41461134c578063edeb797c1461138e578063f1be1679146113ac578063f3e0faba146116b7578063fe4667e91461189b575b005b6119aa6004356024356040805160208181018352600080835283518083018552818152845180840186528281528551938401865282845294519394909390929190819081908190819060039080591061017f5750595b9080825280602002602001820160405250965060036040518059106101a15750595b9080825280602002602001820160405250955060009450600093505b60038510156123045750612710915060009050805b600160005060008c815260200190815260200160002060005060000160005060008b81526020019081526020016000206000506007016000505481101561235f576000600160005060008d815260200190815260200160002060005060000160005060008c81526020019081526020016000206000506006016000506000838152602001908152602001600020600050600101600050541180156102c9575082600160005060008d815260200190815260200160002060005060000160005060008c815260200190815260200160002060005060060160005060008381526020019081526020016000206000506000016000505411155b80156102f9575060008b81526001602090815260408083208d845282528083208484526006019091529020548490115b156103b75760008b81526001602090815260408083208d845282528083208484526006019091529020548390101561038a57600091508150600160005060008c815260200190815260200160002060005060000160005060008b8152602001908152602001600020600050600601600050600082815260200190815260200160002060005060000160005054925082505b60008b81526001602081815260408084208e85528252808420858552600601909152909120015491909101905b6001016101d2565b60408051602480356004818101356020818102868101820190975281865261012796833596939560449501929182919085019084908082843750506040805196358089013560208181028a81018201909452818a529799986064989097506024929092019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a52979998608498909750602492909201955093508392508501908490808284375050604080519635808901356020818102808b018201909452818a5297999860a498909750602492909201955093508392508501908490808284375094965050505050505060008054819081908190600160a060020a03908116339091161415611f555788815260016020526040812093505b8651831015611f555750506001828101805491820190556000818152602084905260409020875188908490811015610002576020908102909101015181558651879084908110156100025790602001906020020151816003016000508190555085838151811015610002579060200190602002015181600101600050819055508483815181101561000257906020019060200201518160020160006101000a815481600160a060020a0302191690830217905550600192909201916104e1565b61012760043533600160a060020a03166000908152600560205260408120541115611cbe57611cc133610f9c565b6004356000908152600160208181526040808420602435855282529283902080549281015484516003830154600293909301549481529283019190915281840152600160a060020a0391909116606082015290519081900360800190f35b60408051602480356004818101356020818102868101820190975281865261012796833596939560449501929182919085019084908082843750506040805196358089013560208181028a81018201909452818a529799986064989097506024929092019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a52979998608498909750602492909201955093508392508501908490808284375050604080519635808901356020818102808b018201909452818a5297999860a4989097506024929092019550935083925085019084908082843750505060008a8152600160208190526040822060020154959750955093849350839250829150819060ff16811415611f25575b60008b81526001602081905260409091200154851015611e4f576040600081812087825260205220875160019190910154908890879081101561000257906020019060200201516040518083815260200182815260200192505050604051809103902093506001848b87815181101561000257906020019060200201518b88815181101561000257906020019060200201518b8981518110156100025790602001906020020151604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051808303816000866161da5a03f115610002575050604051805190602001509250600160005060008c8152602001908152602001600020600050600001600050600086815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031683600160a060020a03161415156108a457600095505b6001949094019361074a565b6004356000908152600160209081526040808320600160a060020a03604435168452600301825280832060243584529091529020545b60408051918252519081900360200190f35b6101275b600080805b6002548310156123aa57600091505b60016000506000848152602001908152602001600020600050600101600050548210156123af575060005b60008381526001602090815260408083208584529091529020600501548110156123bb5733600160a060020a0316600160005060008581526020019081526020016000206000506000016000506000848152602001908152602001600020600050600401600050600083815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a03161415610a365760006001600050600085815260200190815260200160002060005060000160005060008481526020019081526020016000206000506004016000506000838152602001908152602001600020600050600101600050819055505b60010161093b565b6108e66004355b600080808080805b60025484101561263b576040600090812085825260016020526002015460ff16141561264b576000925060016000506000858152602001908152602001600020600050600301600050600088600160a060020a031681526020019081526020016000206000506001016000505491508192508250600090505b600084815260016020819052604090912001548110156126465760406000818120600160a060020a038a1682526003016020908152828220848352905220549091019082821215610b175781925082505b600101610ac6565b6119aa60043560243560408051602081810183526000808352835180830185528181528451808401865282815285519384018652828452945193949093909291908190819081908190600390805910610b755750595b908082528060200260200182016040525096506003604051805910610b975750595b908082528060200260200182016040525095506000945061271093505b6003851015612304575060009150819050805b600160005060008c815260200190815260200160002060005060000160005060008b815260200190815260200160002060005060050160005054811015612315576000600160005060008d815260200190815260200160002060005060000160005060008c8152602001908152602001600020600050600401600050600083815260200190815260200160002060005060010160005054118015610cbe575082600160005060008d815260200190815260200160002060005060000160005060008c815260200190815260200160002060005060040160005060008381526020019081526020016000206000506000016000505410155b8015610cee575060008b81526001602090815260408083208d845282528083208484526004019091529020548490105b15610dac5760008b81526001602090815260408083208d8452825280832084845260040190915290205483901115610d7f57600091508150600160005060008c815260200190815260200160002060005060000160005060008b8152602001908152602001600020600050600401600050600082815260200190815260200160002060005060000160005054925082505b60008b81526001602081815260408084208e85528252808420858552600401909152909120015491909101905b600101610bc7565b6108e66004356024356000828152600160208181526040808420600160a060020a038616855260030190915290912001545b92915050565b61012760043560243560443560643560008080808061271086068114610e16576127108606909503945b6000612132338b8b8a6000036127108d8d02046118ae565b6108e66004356024355b600081831015612657575081610de6565b610127600435600054600160a060020a03908116339091161415611cbe5760008054600160a060020a0319168217905550565b61012733600160a060020a031660009081526005602052604081205481901115611c6e57604080822054825260036020528120600101805434019055611cbe565b6101276004356000805b600083815260016020819052604090912001548110156123aa575060005b60008381526001602090815260408083208584529091529020600501548110156124eb57604060008181208382526004016020522060020154600160a060020a03908116339091161415610f8d5760006001600050600085815260200190815260200160002060005060000160005060008481526020019081526020016000206000506004016000506000838152602001908152602001600020600050600101600050819055505b600101610ee5565b6108e66004355b600160a060020a03811660009081526005602052604081205481901115611d2157611d2982610a45565b6002546108e6565b6108e660043560008181526001602052604090206002015460ff165b919050565b6108e66004355b600160a060020a03811660009081526005602052604081205481901115611d215760408082205482526003602052902060010154610fea565b60408051602081810183526000808352835180830185528181528451808401865282815285518085018752838152865180860188528481528751808701895285815288518088018a5286815289518089018b528781528a51608081018c52888152988901889052888b01889052606089018890529951611a2f9a9698959794969395929491939282918291906019908059106110c85750595b9080825280602002602001820160405250975060196040518059106110ea5750595b90808252806020026020018201604052509650601960405180591061110c5750595b90808252806020026020018201604052509550601960405180591061112e5750595b81815260209182028101909101604052600254909550600094506000190192505b600083121580156111605750601984105b15611d9d5760008381526001602052604081206002015460ff161415611db157600091505b60008381526001602081905260409091200154821015611db157611dbe8383604080516080818101835260008083526020838101829052838501829052606084810183905285519384018652828452908301829052938201819052928101839052909180805b600087815260016020908152604080832089845290915290206005015481101561294b57604060008181208382526004016020529081206001015411801561128657508260016000506000898152602001908152602001600020600050600001600050600088815260200190815260200160002060005060040160005060008381526020019081526020016000206000506000016000505410155b1561134457600087815260016020908152604080832089845282528083208484526004019091529020548390111561131757600091508150600160005060008881526020019081526020016000206000506000016000506000878152602001908152602001600020600050600401600050600082815260200190815260200160002060005060000160005054925082505b60008781526001602081815260408084208a85528252808420858552600401909152909120015491909101905b6001016111eb565b61012760043560243560443560643560008080808061271086068114611376576127108606909503945b6000611f60338b8b8a6127108d8d02046000036118ae565b6108e660043560008181526001602081905260409091200154610fea565b60408051602081810183526000808352835180830185528181528451808401865282815285518085018752838152865180860188528481528751808701895285815288518088018a5286815289518089018b528781528a51808a018c528881528b51998a018c52888a529a51611b2a9b979996989597949686959186908190819060199080591061143a5750595b90808252806020026020018201604052509750601960405180591061145c5750595b90808252806020026020018201604052509650601960405180591061147e5750595b9080825280602002602001820160405250955060196040518059106114a05750595b9080825280602002602001820160405250945060196040518059106114c25750595b81815260209182028101909101604052600254909450600093506000190191505b600082121580156114f45750601983105b15611d5a576040600090812083825260016020526002015460ff161415611d68575060005b60008281526001602081905260409091200154811015611d685780826103e80201888481518110156100025760406000818120602093840290940183019490945284845291905290206003015487518890859081101561000257906020019060200201909081815260200150506001600050600083815260200190815260200160002060005060000160005060008281526020019081526020016000206000506000016000505486848151811015610002579060200190602002019090818152602001505060016000506000838152602001908152602001600020600050600301600050600033600160a060020a0316815260200190815260200160002060005060000160005060008281526020019081526020016000206000505485848151811015610002579060200190602002019090818152602001505060016000506000838152602001908152602001600020600050600301600050600033600160a060020a031681526020019081526020016000206000506001016000505484848151811015610002576020908102909101015260019283019201611519565b604080516004803580820135602081810285810182019096528185526101279593946024949093850192918291908501908490808284375050604080518735808a013560208181028481018201909552818452989a99604499939850919091019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a529799986064989097506024929092019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a529799986084989097506024929092019550935083925085019084908082843750949650505050505050600080548190819081908190600160a060020a03908116339091161415611f5557600280546001818101835581845260205260408320918201805460ff19169055955093505b8751831015611f5557505060018281018054918201905560008181526020849052604090208851899084908110156100025760209081029091010151815587518890849081101561000257602090810290910101516003820155865187908490811015610002576020908102909101015160018201558551869084908110156100025760209081029091010151600282018054600160a060020a0319169091179055600192909201916117ed565b6108e66004356024356044356064356084355b600080808080805b60025484101561261b576040600090812085825260016020526002015460ff16141561262f57600092506001600050600085815260200190815260200160002060005060030160005060008c600160a060020a031681526020019081526020016000206000506001016000505491508984141561193257908601905b5090508060005b6000848152600160208190526040909120015481101561262a5760406000818120600160a060020a038e16825260030160209081528282208483529052205490910190898414801561198a57508881145b1561199457908701905b828212156119a25781925082505b600101611939565b6040518080602001806020018381038352858181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018381038252848181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f15090500194505050505060405180910390f35b60405180806020018060200180602001806020018581038552898181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038452888181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038352878181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038252868181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019850505050505050505060405180910390f35b60405180806020018060200180602001806020018060200188815260200187815260200186810386528d8181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f15090500186810385528c8181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f15090500186810384528b8181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f15090500186810383528a8181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018681038252898181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019c5050505050505050505050505060405180910390f35b506004805460019081019182905560008281526003602090815260408083208054600160a060020a0319163390811782559401805434019055600160a060020a0393909316825260059052208190555b50565b8113611cbe5733600160a060020a031660009081526005602090815260408083205483526003909152902060010180548290039055611cfe6108fc565b60405133600160a060020a031690600090839082818181858883f1505050505050565b506000610fea565b600160a060020a03831660009081526005602090815260408083205483526003909152902060010154019050610fea565b8787878787611d7533610ff6565b60001991909101906114e3565b611d7e33610f9c565b9e509e509e509e509e509e509e50505050505050505090919293949596565b50959a949950929750909550919350505050565b600019929092019161114f565b9050806000015188858151811015610002576020818102909201820192909252820151885190918991811015610002579060200190602002019090818152602001505080604001518685815181101561000257906020019060200201909081815260200150508060600151858581518110156100025750506020858102870101526001938401939190910190611185565b8515611f2557600191505b6004548211611f05575060008a8152600160208181526040808420858552600380845282862054600160a060020a0316865201909152822001549094505b60008b81526001602081905260409091200154851015611f3257604060008181208482526003602081815284842054600160a060020a0316845291018152828220888352905220548751889087908110156100025760209081029091010151020160019490940193611e98565b60008b8152600160208190526040909120600201805460ff191690911790555b5050505050505050505050565b600082815260036020526040902060010180548201905560019190910190611e5a565b505050505050505050565b611f6933610ff6565b011315611f5557600194505b848015611f825750600086115b15612080576000199350600092505b60008981526001602090815260408083208b84529091529020600701548310156120de5760406000818120858252600601602052205487901180159061202a57506000600160005060008b815260200190815260200160002060005060000160005060008a8152602001908152602001600020600050600601600050600085815260200190815260200160002060005060010160005054115b801561206957506000841280612069575060008981526001602090815260408083208b8452825280832087845260060190915280822054858352912054105b156120745782935083505b60019290920191611f91565b6000861115611f5557505050600095865250506001602081815260408087209587529481528486206005810180548085019091558752600401905292909320908155908101919091556002018054600160a060020a03191633179055565b60008412156120f0576000945061212d565b61212a8989898988600085815260016020818152604080842088855282528084208585526006019091528220015481906126939085610e38565b95505b611f75565b61213b33610ff6565b011315611f5557600194505b8480156121545750600086115b15612252576000199350600092505b60008981526001602090815260408083208b84529091529020600501548310156122b0576040600081812085825260040160205220548790108015906121fc57506000600160005060008b815260200190815260200160002060005060000160005060008a8152602001908152602001600020600050600401600050600085815260200190815260200160002060005060010160005054115b801561223b5750600084128061223b575060008981526001602090815260408083208b8452825280832087845260040190915280822054858352912054115b156122465782935083505b60019290920191612163565b6000861115611f5557505050600095865250506001602081815260408087209587529481528486206007810180548085019091558752600601905292909320908155908101919091556002018054600160a060020a03191633179055565b60008412156122c257600094506122ff565b6122fc8989898988600085815260016020818152604080842088855282528084208585526004019091528220015481906127d89085610e38565b95505b612147565b509499939850929650505050505050565b600083111561235357829350835082878681518110156100025760209081029091010152855182908790879081101561000257602090810290910101525b60019490940193610bb4565b61271083101561239e57829350835082878681518110156100025760209081029091010152855182908790879081101561000257602090810290910101525b600194909401936101bd565b505050565b60019290920191610901565b5060005b600160005060008481526020019081526020016000206000506000016000506000838152602001908152602001600020600050600701600050548110156124df5733600160a060020a0316600160005060008581526020019081526020016000206000506000016000506000848152602001908152602001600020600050600601600050600083815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031614156124d75760006001600050600085815260200190815260200160002060005060000160005060008481526020019081526020016000206000506006016000506000838152602001908152602001600020600050600101600050819055505b6001016123bf565b60019190910190610910565b5060005b6001600050600084815260200190815260200160002060005060000160005060008381526020019081526020016000206000506007016000505481101561260f5733600160a060020a0316600160005060008581526020019081526020016000206000506000016000506000848152602001908152602001600020600050600601600050600083815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031614156126075760006001600050600085815260200190815260200160002060005060000160005060008481526020019081526020016000206000506006016000506000838152602001908152602001600020600050600101600050819055505b6001016124ef565b60019190910190610ec7565b50929998505050505050505050565b938201935b600193909301926118b6565b509295945050505050565b938201935b60019390930192610a4d565b5080610de6565b60008781526001602081815260408084208a85528252808420878552600601909152822001555b8391505b5095945050505050565b60008881526001602090815260408083208a84528252808320878452600601909152812080546002919091015492935090916126ea91600160a060020a0391909116908a908a9086860390612710908802046118ae565b60008981526001602090815260408083208b8452825280832088845260060190915290206002015461272490600160a060020a0316610ff6565b01131561265e57600087815260016020818152604080842033600160a060020a039081168652600382018085528387208d885280865284882080548a0190559285528387208a8852600601855283872080549387018054612710958b028690049003905580870180548a90039055600281018054841689528287528589208f8a52875285892080548b9003905590549054909216875290935293209091018054918402929092040190559283900392612685565b60008881526001602090815260408083208a845282528083208784526004019091528120805460029190910154929350909161282f91600160a060020a0391909116908a908a9086906127109082020486036118ae565b60008981526001602090815260408083208b8452825280832088845260040190915290206002015461286990600160a060020a0316610ff6565b01131561291d57600087815260016020818152604080842033600160a060020a039081168652600382018085528387208d885280865284882080548a900390559285528387208a8852600401855283872080549387018054612710958b0286900401905580870180548a90039055600281018054841689528287528589208f8a52875285892080548b0190559054905490921687529093529320909101805491840292909204900390559283900392612685565b60008781526001602081815260408084208a8552825280842087855260040190915282200155839150612689565b5090825260208201526127106000805b6000878152600160209081526040808320898452909152902060070154811015612abc5760406000818120838252600601602052908120600101541180156129f657508260016000506000898152602001908152602001600020600050600001600050600088815260200190815260200160002060005060060160005060008381526020019081526020016000206000506000016000505411155b15612ab4576000878152600160209081526040808320898452825280832084845260060190915290205483901015612a8757600091508150600160005060008881526020019081526020016000206000506000016000506000878152602001908152602001600020600050600601600050600082815260200190815260200160002060005060000160005054925082505b60008781526001602081815260408084208a85528252808420858552600601909152909120015491909101905b60010161295b565b5060408301919091526060820152939250505056","info":{"source":"contract Market {\n\n  address admin = 0x18e79a47d8a58bef5aaecbba85ea1420649c64a8;\n\n  struct Order {\n    uint price;\n    uint size;\n    address user;\n  }\n  struct Option {\n    uint id;\n    bytes32 factHash;\n    address ethAddr;\n    uint strike;\n    mapping(uint => Order) buyOrders;\n    uint numBuyOrders;\n    mapping(uint => Order) sellOrders;\n    uint numSellOrders;\n  }\n  struct TopLevel {\n    uint buyPrice;\n    uint buySize;\n    uint sellPrice;\n    uint sellSize;\n  }\n  struct Position {\n    mapping(uint => int) positions;\n    int cash;\n  }\n  struct OptionChain {\n    mapping(uint => Option) options;\n    uint numOptions;\n    bool expired;\n    mapping(address => Position) positions;\n  }\n  mapping(uint => OptionChain) optionChains;\n  uint numOptionChains;\n  struct Account {\n    address user;\n    int capital;\n  }\n  mapping(uint => Account) accounts;\n  uint numAccounts;\n  mapping(address => uint) accountIDs; //starts at 1\n\n  function addFunds() {\n    if (accountIDs[msg.sender]>0) {\n      accounts[accountIDs[msg.sender]].capital += int(msg.value);\n    } else {\n      uint accountID = ++numAccounts;\n      accounts[accountID].user = msg.sender;\n      accounts[accountID].capital += int(msg.value);\n      accountIDs[msg.sender] = accountID;\n    }\n  }\n\n  function withdrawFunds(uint amount) {\n    if (accountIDs[msg.sender]>0) {\n      if (int(amount)<=getAvailableFunds(msg.sender)) {\n        accounts[accountIDs[msg.sender]].capital -= int(amount);\n        cancelOrders();\n        msg.sender.send(amount);\n      }\n    }\n  }\n\n  function getFunds(address user) constant returns(int) {\n    if (accountIDs[user]>0) {\n      return accounts[accountIDs[user]].capital;\n    } else {\n      return 0;\n    }\n  }\n\n  function getAvailableFunds(address user) constant returns(int) {\n    if (accountIDs[user]>0) {\n      return accounts[accountIDs[user]].capital + getMaxLoss(user);\n    } else {\n      return 0;\n    }\n  }\n\n  function getMarket() constant returns(uint[], uint[], uint[], int[], int[], int, int) {\n    uint[] memory optionIDs = new uint[](25);\n    uint[] memory strikes = new uint[](25);\n    uint[] memory ids = new uint[](25);\n    int[] memory positions = new int[](25);\n    int[] memory cashes = new int[](25);\n    uint z = 0;\n    for (int optionChainID=int(numOptionChains)-1; optionChainID>=0 && z<25; optionChainID--) {\n      if (optionChains[uint(optionChainID)].expired == false) {\n        for (uint optionID=0; optionID<optionChains[uint(optionChainID)].numOptions; optionID++) {\n          optionIDs[z] = uint(optionChainID)*1000 + optionID;\n          strikes[z] = optionChains[uint(optionChainID)].options[optionID].strike;\n          ids[z] = optionChains[uint(optionChainID)].options[optionID].id;\n          positions[z] = optionChains[uint(optionChainID)].positions[msg.sender].positions[optionID];\n          cashes[z] = optionChains[uint(optionChainID)].positions[msg.sender].cash;\n          z++;\n        }\n      }\n    }\n    return (optionIDs, strikes, ids, positions, cashes, getFunds(msg.sender), getAvailableFunds(msg.sender));\n  }\n\n  function getMarketTopLevels() returns(uint[], uint[], uint[], uint[]) {\n    uint[] memory buyPrices = new uint[](25);\n    uint[] memory buySizes = new uint[](25);\n    uint[] memory sellPrices = new uint[](25);\n    uint[] memory sellSizes = new uint[](25);\n    uint z = 0;\n    for (int optionChainID=int(numOptionChains)-1; optionChainID>=0 && z<25; optionChainID--) {\n      if (optionChains[uint(optionChainID)].expired == false) {\n        for (uint optionID=0; optionID<optionChains[uint(optionChainID)].numOptions; optionID++) {\n          TopLevel memory topLevel = getTopLevel(uint(optionChainID), optionID);\n          buyPrices[z] = topLevel.buyPrice;\n          buySizes[z] = topLevel.buySize;\n          sellPrices[z] = topLevel.sellPrice;\n          sellSizes[z] = topLevel.sellSize;\n          z++;\n        }\n      }\n    }\n    return (buyPrices, buySizes, sellPrices, sellSizes);\n  }\n\n  function expire(uint optionChainID, uint8[] v, bytes32[] r, bytes32[] s, uint256[] value) {\n    bool allSigned = true;\n    if (optionChains[optionChainID].expired == false) {\n      for (uint optionID=0; optionID<optionChains[optionChainID].numOptions; optionID++) {\n        var hash = sha3(optionChains[optionChainID].options[optionID].factHash, value[optionID]);\n        var signerAddress = ecrecover(hash, v[optionID], r[optionID], s[optionID]);\n        if (signerAddress != optionChains[optionChainID].options[optionID].ethAddr) {\n          allSigned = false;\n        }\n      }\n      if (allSigned) {\n        for (uint accountID=1; accountID<=numAccounts; accountID++) {\n          int result = optionChains[optionChainID].positions[accounts[accountID].user].cash;\n          for (optionID=0; optionID<optionChains[optionChainID].numOptions; optionID++) {\n            result += (int(value[optionID]) * optionChains[optionChainID].positions[accounts[accountID].user].positions[optionID]);\n          }\n          accounts[accountID].capital = accounts[accountID].capital + result;\n        }\n        optionChains[optionChainID].expired = true;\n      }\n    }\n  }\n\n  function addOptionChain(uint[] ids, uint[] strikes, bytes32[] factHashes, address[] ethAddrs) {\n    if (msg.sender==admin) {\n      var optionChainID = numOptionChains++;\n      OptionChain optionChain = optionChains[optionChainID];\n      optionChain.expired = false;\n      for (uint i=0; i < strikes.length; i++) {\n        var optionID = optionChain.numOptions++;\n        Option option = optionChain.options[optionID];\n        option.id = ids[i];\n        option.strike = strikes[i];\n        option.factHash = factHashes[i];\n        option.ethAddr = ethAddrs[i];\n      }\n    }\n  }\n\n  function addToOptionChain(uint optionChainID, uint[] ids, uint[] strikes, bytes32[] factHashes, address[] ethAddrs) {\n    if (msg.sender==admin) {\n      OptionChain optionChain = optionChains[optionChainID];\n      for (uint i=0; i < strikes.length; i++) {\n        var optionID = optionChain.numOptions++;\n        Option option = optionChain.options[optionID];\n        option.id = ids[i];\n        option.strike = strikes[i];\n        option.factHash = factHashes[i];\n        option.ethAddr = ethAddrs[i];\n      }\n    }\n  }\n\n  function isExpired(uint optionChainID) constant returns(bool) {\n    return optionChains[optionChainID].expired;\n  }\n  function getNumOptionChains() constant returns(uint) {\n    return numOptionChains;\n  }\n  function getNumOptions(uint optionChainID) constant returns(uint) {\n    return optionChains[optionChainID].numOptions;\n  }\n  function getOption(uint optionChainID, uint optionID) constant returns(uint, uint, bytes32, address) {\n    return (optionChains[optionChainID].options[optionID].id, optionChains[optionChainID].options[optionID].strike, optionChains[optionChainID].options[optionID].factHash, optionChains[optionChainID].options[optionID].ethAddr);\n  }\n  function getPosition(uint optionChainID, uint optionID, address user) constant returns(int) {\n    return optionChains[optionChainID].positions[user].positions[optionID];\n  }\n  function getCash(uint optionChainID, address user) constant returns(int) {\n    return optionChains[optionChainID].positions[user].cash;\n  }\n\n  function placeBuyOrder(uint optionChainID, uint optionID, uint price, uint size) {\n    if (size % 10000 != 0) {\n      size -= size % 10000;\n    }\n    if (getFunds(msg.sender)+getMaxLossAfterTrade(msg.sender, optionChainID, optionID, int(size), -int(size * price / 10000))>0) {\n      bool foundMatch = true;\n      while (foundMatch && size>0) {\n        int256 bestPriceID = -1;\n        for (uint256 i=0; i<optionChains[optionChainID].options[optionID].numSellOrders; i++) {\n          if (optionChains[optionChainID].options[optionID].sellOrders[i].price<=price && optionChains[optionChainID].options[optionID].sellOrders[i].size>0 && (bestPriceID<0 || optionChains[optionChainID].options[optionID].sellOrders[i].price<optionChains[optionChainID].options[optionID].sellOrders[uint(bestPriceID)].price)) {\n            bestPriceID = int(i);\n          }\n        }\n        if (bestPriceID<0) {\n          foundMatch = false;\n        } else {\n          size = orderMatchBuy(optionChainID, optionID, price, size, uint(bestPriceID));\n        }\n      }\n      if (size>0) {\n        uint orderID = optionChains[optionChainID].options[optionID].numBuyOrders++;\n        Order order = optionChains[optionChainID].options[optionID].buyOrders[orderID];\n        order.price = price;\n        order.size = size;\n        order.user = msg.sender;\n      }\n    }\n  }\n\n  function placeSellOrder(uint optionChainID, uint optionID, uint price, uint size) {\n    if (size % 10000 != 0) {\n      size -= size % 10000;\n    }\n    if (getFunds(msg.sender)+getMaxLossAfterTrade(msg.sender, optionChainID, optionID, -int(size), int(size * price / 10000))>0) {\n      bool foundMatch = true;\n      while (foundMatch && size>0) {\n        int256 bestPriceID = -1;\n        for (uint256 i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders; i++) {\n          if (optionChains[optionChainID].options[optionID].buyOrders[i].price>=price && optionChains[optionChainID].options[optionID].buyOrders[i].size>0 && (bestPriceID<0 || optionChains[optionChainID].options[optionID].buyOrders[i].price>optionChains[optionChainID].options[optionID].buyOrders[uint(bestPriceID)].price)) {\n            bestPriceID = int(i);\n          }\n        }\n        if (bestPriceID<0) {\n          foundMatch = false;\n        } else {\n          size = orderMatchSell(optionChainID, optionID, price, size, uint(bestPriceID));\n        }\n      }\n      if (size>0) {\n        uint orderID = optionChains[optionChainID].options[optionID].numSellOrders++;\n        Order order = optionChains[optionChainID].options[optionID].sellOrders[orderID];\n        order.price = price;\n        order.size = size;\n        order.user = msg.sender;\n      }\n    }\n  }\n\n  function orderMatchBuy(uint optionChainID, uint optionID, uint price, uint size, uint bestPriceID) private returns(uint) {\n    uint sizeChange = min(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size, size);\n    if (getFunds(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user)+getMaxLossAfterTrade(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user, optionChainID, optionID, -int(sizeChange), int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000))>0) {\n      size -= sizeChange;\n      optionChains[optionChainID].positions[msg.sender].positions[optionID] += int(sizeChange);\n      optionChains[optionChainID].positions[msg.sender].cash -= int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000);\n      optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size -= sizeChange;\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].positions[optionID] -= int(sizeChange);\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].cash += int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000);\n    } else {\n      optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size = 0;\n    }\n    return size;\n  }\n\n  function orderMatchSell(uint optionChainID, uint optionID, uint price, uint size, uint bestPriceID) private returns(uint) {\n    uint sizeChange = min(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size, size);\n    if (getFunds(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user)+getMaxLossAfterTrade(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user, optionChainID, optionID, int(sizeChange), -int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000))>0) {\n      size -= sizeChange;\n      optionChains[optionChainID].positions[msg.sender].positions[optionID] -= int(sizeChange);\n      optionChains[optionChainID].positions[msg.sender].cash += int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000);\n      optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size -= sizeChange;\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].positions[optionID] += int(sizeChange);\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].cash -= int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000);\n    } else {\n      optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size = 0;\n    }\n    return size;\n  }\n\n  function getOptionBuyOrders(uint optionChainID, uint optionID) constant returns(uint[], uint[]) {\n    uint[] memory buyPrices = new uint[](3);\n    uint[] memory buySizes = new uint[](3);\n    uint z = 0;\n    uint bestLevel = 10000;\n    while (z<3) {\n      uint watermark = 0;\n      uint size = 0;\n      for (uint i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders; i++) {\n        if (optionChains[optionChainID].options[optionID].buyOrders[i].size>0 && optionChains[optionChainID].options[optionID].buyOrders[i].price>=watermark && optionChains[optionChainID].options[optionID].buyOrders[i].price<bestLevel) {\n          if (optionChains[optionChainID].options[optionID].buyOrders[i].price>watermark) {\n            size = 0;\n            watermark = optionChains[optionChainID].options[optionID].buyOrders[i].price;\n          }\n          size += optionChains[optionChainID].options[optionID].buyOrders[i].size;\n        }\n      }\n      if (watermark>0) {\n        bestLevel = watermark;\n        buyPrices[z] = watermark;\n        buySizes[z] = size;\n      }\n      z = z + 1;\n    }\n    return (buyPrices, buySizes);\n  }\n\n  function getOptionSellOrders(uint optionChainID, uint optionID) constant returns(uint[], uint[]) {\n    uint[] memory sellPrices = new uint[](3);\n    uint[] memory sellSizes = new uint[](3);\n    uint z = 0;\n    uint bestLevel = 0;\n    while (z<3) {\n      uint watermark = 10000;\n      uint size = 0;\n      for (uint i=0; i<optionChains[optionChainID].options[optionID].numSellOrders; i++) {\n        if (optionChains[optionChainID].options[optionID].sellOrders[i].size>0 && optionChains[optionChainID].options[optionID].sellOrders[i].price<=watermark && optionChains[optionChainID].options[optionID].sellOrders[i].price>bestLevel) {\n          if (optionChains[optionChainID].options[optionID].sellOrders[i].price<watermark) {\n            size = 0;\n            watermark = optionChains[optionChainID].options[optionID].sellOrders[i].price;\n          }\n          size += optionChains[optionChainID].options[optionID].sellOrders[i].size;\n        }\n      }\n      if (watermark<10000) {\n        bestLevel = watermark;\n        sellPrices[z] = watermark;\n        sellSizes[z] = size;\n      }\n      z = z + 1;\n    }\n    return (sellPrices, sellSizes);\n  }\n\n  function getTopLevel(uint optionChainID, uint optionID) private constant returns(TopLevel) {\n    TopLevel memory topLevel;\n    uint watermark = 0;\n    uint size = 0;\n    for (uint i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders; i++) {\n      if (optionChains[optionChainID].options[optionID].buyOrders[i].size>0 && optionChains[optionChainID].options[optionID].buyOrders[i].price>=watermark) {\n        if (optionChains[optionChainID].options[optionID].buyOrders[i].price>watermark) {\n          size = 0;\n          watermark = optionChains[optionChainID].options[optionID].buyOrders[i].price;\n        }\n        size += optionChains[optionChainID].options[optionID].buyOrders[i].size;\n      }\n    }\n    topLevel.buyPrice = watermark;\n    topLevel.buySize = size;\n    watermark = 10000;\n    size = 0;\n    for (i=0; i<optionChains[optionChainID].options[optionID].numSellOrders; i++) {\n      if (optionChains[optionChainID].options[optionID].sellOrders[i].size>0 && optionChains[optionChainID].options[optionID].sellOrders[i].price<=watermark) {\n        if (optionChains[optionChainID].options[optionID].sellOrders[i].price<watermark) {\n          size = 0;\n          watermark = optionChains[optionChainID].options[optionID].sellOrders[i].price;\n        }\n        size += optionChains[optionChainID].options[optionID].sellOrders[i].size;\n      }\n    }\n    topLevel.sellPrice = watermark;\n    topLevel.sellSize = size;\n    return topLevel;\n  }\n\n  function cancelOrders() {\n    for (uint optionChainID=0; optionChainID<numOptionChains; optionChainID++) {\n      for (uint i=0; i<optionChains[optionChainID].numOptions; i++) {\n        for (uint j=0; j<optionChains[optionChainID].options[i].numBuyOrders; j++) {\n          if (optionChains[optionChainID].options[i].buyOrders[j].user==msg.sender) {\n            optionChains[optionChainID].options[i].buyOrders[j].size = 0;\n          }\n        }\n        for (j=0; j<optionChains[optionChainID].options[i].numSellOrders; j++) {\n          if (optionChains[optionChainID].options[i].sellOrders[j].user==msg.sender) {\n            optionChains[optionChainID].options[i].sellOrders[j].size = 0;\n          }\n        }\n      }\n    }\n  }\n\n  function cancelOrdersOnChain(uint optionChainID) {\n    for (uint i=0; j<optionChains[optionChainID].numOptions; i++) {\n      for (uint j=0; j<optionChains[optionChainID].options[i].numBuyOrders; j++) {\n        if (optionChains[optionChainID].options[i].buyOrders[j].user==msg.sender) {\n          optionChains[optionChainID].options[i].buyOrders[j].size = 0;\n        }\n      }\n      for (j=0; j<optionChains[optionChainID].options[i].numSellOrders; j++) {\n        if (optionChains[optionChainID].options[i].sellOrders[j].user==msg.sender) {\n          optionChains[optionChainID].options[i].sellOrders[j].size = 0;\n        }\n      }\n    }\n  }\n\n  function getMaxLossAfterTrade(address user, uint optionChainID, uint optionID, int positionChange, int cashChange) constant returns(int) {\n    int totalMaxLoss = 0;\n    for (uint i=0; i<numOptionChains; i++) {\n      if (optionChains[i].expired == false) {\n        int maxLoss = 0;\n        int pnl = optionChains[i].positions[user].cash;\n        if (i==optionChainID) {\n          pnl += cashChange;\n        }\n        maxLoss = pnl;\n        for (uint j=0; j<optionChains[i].numOptions; j++) {\n          pnl += optionChains[i].positions[user].positions[j];\n          if (i==optionChainID && j==optionID) {\n            pnl += positionChange;\n          }\n          if (pnl<maxLoss) {\n            maxLoss = pnl;\n          }\n        }\n        totalMaxLoss += maxLoss;\n      }\n    }\n    return totalMaxLoss;\n  }\n\n  function getMaxLoss(address user) constant returns(int) {\n    int totalMaxLoss = 0;\n    for (uint i=0; i<numOptionChains; i++) {\n      if (optionChains[i].expired == false) {\n        int maxLoss = 0;\n        int pnl = optionChains[i].positions[user].cash;\n        maxLoss = pnl;\n        for (uint j=0; j<optionChains[i].numOptions; j++) {\n          pnl += optionChains[i].positions[user].positions[j];\n          if (pnl<maxLoss) {\n            maxLoss = pnl;\n          }\n        }\n        totalMaxLoss += maxLoss;\n      }\n    }\n    return totalMaxLoss;\n  }\n\n  function changeAdmin(address newAdmin) {\n    if (msg.sender == admin) {\n      admin = newAdmin;\n    }\n  }\n\n  function min(uint a, uint b) constant returns(uint) {\n    if (a<b) {\n      return a;\n    } else {\n      return b;\n    }\n  }\n}\n","language":"Solidity","languageVersion":"0.2.0","compilerVersion":"0.2.0","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /var/folders/sj/bz257rsj0w1g7cpjjycd7wpw0000gn/T/solc896316489","abiDefinition":[{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"}],"name":"getOptionSellOrders","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"ids","type":"uint256[]"},{"name":"strikes","type":"uint256[]"},{"name":"factHashes","type":"bytes32[]"},{"name":"ethAddrs","type":"address[]"}],"name":"addToOptionChain","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"withdrawFunds","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"}],"name":"getOption","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"bytes32"},{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"v","type":"uint8[]"},{"name":"r","type":"bytes32[]"},{"name":"s","type":"bytes32[]"},{"name":"value","type":"uint256[]"}],"name":"expire","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"user","type":"address"}],"name":"getPosition","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":false,"inputs":[],"name":"cancelOrders","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getMaxLoss","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"}],"name":"getOptionBuyOrders","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"}],"type":"function"},{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"user","type":"address"}],"name":"getCash","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"price","type":"uint256"},{"name":"size","type":"uint256"}],"name":"placeSellOrder","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"min","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"newAdmin","type":"address"}],"name":"changeAdmin","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"addFunds","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"}],"name":"cancelOrdersOnChain","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getAvailableFunds","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[],"name":"getNumOptionChains","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"}],"name":"isExpired","outputs":[{"name":"","type":"bool"}],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getFunds","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":false,"inputs":[],"name":"getMarketTopLevels","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"price","type":"uint256"},{"name":"size","type":"uint256"}],"name":"placeBuyOrder","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"}],"name":"getNumOptions","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"getMarket","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"int256[]"},{"name":"","type":"int256[]"},{"name":"","type":"int256"},{"name":"","type":"int256"}],"type":"function"},{"constant":false,"inputs":[{"name":"ids","type":"uint256[]"},{"name":"strikes","type":"uint256[]"},{"name":"factHashes","type":"bytes32[]"},{"name":"ethAddrs","type":"address[]"}],"name":"addOptionChain","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"},{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"positionChange","type":"int256"},{"name":"cashChange","type":"int256"}],"name":"getMaxLossAfterTrade","outputs":[{"name":"","type":"int256"}],"type":"function"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}}}