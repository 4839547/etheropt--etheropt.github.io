{"Market":{"code":"0x606060405260008054600160a060020a0319167318e79a47d8a58bef5aaecbba85ea1420649c64a817815561287e90819061003990396000f3606060405236156100ae5760e060020a6000350463155dd5ee81146100b05780633597e636146100e0578063460c1a7a1461035d5780635c665f89146104c057806372e18c121461050c5780637ae2b5c71461054d5780638f28397014610568578063a26759cb1461059c578063d4dfadbf146105dd578063d5544f94146108f0578063e54aae1314610905578063eddb00d414610bf4578063f7034bf514610c35578063fe4667e914610d81575b005b6100ae60043533600160a060020a03166000908152600560205260408120541115610599576112353360016104ca565b60408051604435600481810135602081810285810182019096528185526100ae9583359560248035966064959294910192829185019084908082843750506040805196358089013560208181028a81018201909452818a529799986084989097506024929092019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a5297999860a498909750602492909201955093508392508501908490808284375050604080519635808901356020818102808b018201909452818a5297999860c4989097506024929092019550935083925085019084908082843750505060008a815260016020819052604082206002015495975095509384935083925082915060ff1681141561151d575b60008a8152600160208190526040909120015484101561139e5760406000818120868252602052206001908101548751889087908110156100025790602001906020020151604051808381526020018281526020019250505060405180910390208a86815181101561000257906020019060200201518a87815181101561000257906020019060200201518a8881518110156100025790602001906020020151604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051808303816000866161da5a03f115610002575050604051805190602001509250600160005060008b8152602001908152602001600020600050600001600050600085815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031683600160a060020a031614151561035157600094505b600193909301926101fe565b6100ae5b600080805b6002548310156110ec57600091505b60016000506000848152602001908152602001600020600050600101600050548210156110f1575060005b600160005060008481526020019081526020016000206000506000016000506000838152602001908152602001600020600050600501600050548110156110fd5733600160a060020a0316600160005060008581526020019081526020016000206000506000016000506000848152602001908152602001600020600050600401600050600083815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031614156104b85760006001600050600085815260200190815260200160002060005060000160005060008481526020019081526020016000206000506004016000506000838152602001908152602001600020600050600101600050819055505b6001016103a0565b610e906004356024355b600160a060020a0382166000908152600560205260408120548190111561129557816000141561129d57604080822054825260036020529020600101546111e0565b6100ae600435602435604435606435600080808061271085068114610535576127108506909403935b6000611c08338a8a896000036127108c8c0204610d94565b610e906004356024355b6000818310156111dd5750816111e0565b6100ae600435600054600160a060020a039081163390911614156105995760008054600160a060020a031916821790555b50565b6100ae33600160a060020a0316600090815260056020526040812054819011156111e657604080822054825260036020528120600101805434019055610599565b610ea260043560408051602081810183526000808352835180830185528181528451808401865282815285518085018752838152865180860188528481528751808701895285815288518088018a5286815289518089018b528781528a51808a018c528881528b51998a018c52888a529a51999a9699959894979396929591949093909181908190601e908059106106725750595b90808252806020026020018201604052509750601e6040518059106106945750595b90808252806020026020018201604052509650601e6040518059106106b65750595b90808252806020026020018201604052509550601e6040518059106106d85750595b90808252806020026020018201604052509450601e6040518059106106fa5750595b81815260209182028101909101604052600254909450600093506000190191505b6000821215801561072c5750601e83105b156112f35760008281526001602052604081206002015460ff161415611309575060005b600082815260016020819052604090912001548110156113095780826103e802018884815181101561000257604060008181206020848102909501850195909552858152939092529120600301548851909189918110156100025790602001906020020190908181526020015050600160005060008381526020019081526020016000206000506000016000506000828152602001908152602001600020600050600001600050548684815181101561000257906020019060200201909081815260200150506001600050600083815260200190815260200160002060005060030160005060008f600160a060020a031681526020019081526020016000206000506000016000506000828152602001908152602001600020600050548584815181101561000257906020019060200201909081815260200150506001600050600083815260200190815260200160002060005060030160005060008f600160a060020a03168152602001908152602001600020600050600101600050548484815181101561000257505060208481028601015260019283019201610750565b610fd8600435600060006112df8360006104ca565b60408051602081810183526000808352835180830185528181528451808401865282815285518085018752838152865180860188528481528751808701895285815288518088018a5286815289519788018a528688529851610ff199959794969395929491939081908190601e9080591061097d5750595b90808252806020026020018201604052509650601e60405180591061099f5750595b90808252806020026020018201604052509550601e6040518059106109c15750595b90808252806020026020018201604052509450601e6040518059106109e35750595b81815260209182028101909101604052600254909450600093506000190191505b60008212158015610a155750601e83105b156113165760008281526001602052604081206002015460ff161415611328575060005b600082815260016020819052604090912001548110156113285761133582826000808080808080808080805b60008d81526001602090815260408083208f8452909152902060050154811015611fef576040600081812083825260040160205290812060010154118015610b00575082600160005060008f815260200190815260200160002060005060000160005060008e815260200190815260200160002060005060040160005060008381526020019081526020016000206000506000016000505410155b15610bec5760008d81526001602090815260408083208f8452825280832084845260040190915290205483901115610b9157600091508150600160005060008e815260200190815260200160002060005060000160005060008d8152602001908152602001600020600050600401600050600082815260200190815260200160002060005060000160005054925082505b600160005060008e815260200190815260200160002060005060000160005060008d81526020019081526020016000206000506004016000506000828152602001908152602001600020600050600101600050548201915081505b600101610a65565b6100ae600435602435604435606435600080808061271085068114610c1d576127108506909403935b60006117ae338a8a896127108c8c0204600003610d94565b6040805160248035600481810135602081810286810182019097528186526100ae96833596939560449501929182919085019084908082843750506040805196358089013560208181028a81018201909452818a529799986064989097506024929092019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a529799986084989097506024929092019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a5297999860a4989097506024929092019550935083925085019084908082843750949650505050505050600080548190819081908190600160a060020a039081163390911614156117a257600254600695508590101561159157600280546001810190915594505b60068510156117a25760068a10156115f357899450611621565b610e906004356024356044356064356084355b600080808080805b6002548410156111bd576040600090812085825260016020526002015460ff1614156111d157600092506001600050600085815260200190815260200160002060005060030160005060008c600160a060020a0316815260200190815260200160002060005060010160005054915089841415610e1857908601905b5090508060005b600084815260016020819052604090912001548110156111cc5760406000818120600160a060020a038e168252600301602090815282822084835290522054909101908984148015610e7057508881145b15610e7a57908701905b82821215610e885781925082505b600101610e1f565b60408051918252519081900360200190f35b60405180806020018060200180602001806020018060200186810386528b8181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f15090500186810385528a8181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018681038452898181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018681038352888181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018681038252878181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019a505050505050505050505060405180910390f35b6040805192835260208301919091528051918290030190f35b60405180806020018060200180602001806020018581038552898181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038452888181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038352878181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038252868181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019850505050505050505060405180910390f35b505050565b60019290920191610366565b5060005b60008381526001602090815260408083208584529091529020600701548110156111b157604060008181208382526006016020522060020154600160a060020a039081163390911614156111a95760006001600050600085815260200190815260200160002060005060000160005060008481526020019081526020016000206000506006016000506000838152602001908152602001600020600050600101600050819055505b600101611101565b60019190910190610375565b50929998505050505050505050565b938201935b60019390930192610d9c565b50805b92915050565b506004805460019081019182905560008281526003602090815260408083208054600160a060020a0319163390811782559401805434019055600160a060020a03939093168252600590522055565b81136105995733600160a060020a031660009081526005602090815260408083205483526003909152902060010180548290039055611272610361565b60405133600160a060020a031690600090839082818181858883f1505050505050565b5060006111e0565b6112ae836000600060006000610d94565b600160a060020a038416600090815260056020908152604080832054835260039091529020600101540190506111e0565b6112ea8460016104ca565b91509150915091565b50959c949b509299509097509550909350505050565b600019919091019061071b565b50949993985091965094509092505050565b6000199190910190610a04565b8a878151811015610002579060200190602002018a888151811015610002579060200190602002018a898151811015610002579060200190602002018a8a815181101561000257505060208a81028c010193909352929091529190525260019283019201610a39565b841561151d57600454915060008b14156113bb5760019a506113bf565b8a91505b818b116114e95760008a81526001602090815260408083208e8452600380845282852054600160a060020a031685520190915281206002015460ff16141561158557600160005060008b81526020019081526020016000206000506003016000506000600360005060008e815260200190815260200160002060005060000160009054906101000a9004600160a060020a0316600160a060020a031681526020019081526020016000206000506001016000505490506000935083505b60008a8152600160208190526040909120015484101561152a57604060008181208d82526003602081815284842054600160a060020a031684529101815282822087835290522054865187908690811015610002576020908102909101015102016001939093019261147c565b60008a8152600160205260409020600481015460059190910154141561151d576040600020600201805460ff191660011790555b5050505050505050505050565b60008b815260036020818152604080842060018181018054880190558f86528084528286209154600160a060020a031686529381018352908420600201805460ff191684179055928d90528190526005909101805490910190555b60019a909a01996113bf565b600093505b600254841080156115a8575060068510155b15610d675760008481526001602081905260409091206002015460ff1614806115dc57506040600090812085825260010154145b156115e75783945084505b60019390930192611596565b6000858152600160208190526040822090810182905560028101805460ff1916905560048101829055600501555b600085815260016020526040812090945092505b87518410156117a25760018301546005901015611796575050600181810180549182019055600083815260208390526040902088518990859081101561000257602090810290910101518155875188908590811015610002576020908102909101015160038201558651879085908110156100025760209081029091010151600182015585518690859081101561000257906020019060200201518160020160006101000a815481600160a060020a03021916908302179055508083600001600050600086815260200190815260200160002060005060008201600050548160000160005055600182016000505481600101600050556002820160009054906101000a9004600160a060020a03168160020160006101000a815481600160a060020a03021916908302179055506003820160005054816003016000505560058201600050548160050160005055600782016000505481600701600050559050505b60019390930192611635565b50505050505050505050565b6117b93360006104ca565b011315611a3357600193505b8380156117d25750600085115b1561194c576000199250600091505b60008881526001602090815260408083208a8452909152902060070154821015611a3d5760406000818120848252600601602052205486901180159061187a57506000600160005060008a81526020019081526020016000206000506000016000506000898152602001908152602001600020600050600601600050600084815260200190815260200160002060005060010160005054115b8015611935575060008312806119355750600160005060008981526020019081526020016000206000506000016000506000888152602001908152602001600020600050600601600050600084815260200190815260200160002060005060000160005054600160005060008a81526020019081526020016000206000506000016000506000898152602001908152602001600020600050600601600050600084815260200190815260200160002060005060000160005054105b156119405781925082505b600191909101906117e1565b6000851115611a3357506000878152600160209081526040808320898452909152902060059081015481901015611a88576001600050600089815260200190815260200160002060005060000160005060008881526020019081526020016000206000506005016000818150548092919060010191905055905080505b6005811015611a33576040805160608101825287815260208181018881523383850190815260008d815260018085528682208e835285528682208883526004019094529490942092518355519082015590516002919091018054600160a060020a03191690911790555b5050505050505050565b6000831215611a4f5760009350611a83565b6040600081812085825260060160205290812060010154611a80918a918a918a918a91899181906121d49085610557565b94505b6117c5565b600091505b60008881526001602090815260408083208a845290915290206005015482108015611ad85750600581101580611ad85750604060008181208382526004016020529081206001015414155b156119c95760008881526001602081815260408084208b85528252808420868552600401909152822001541415611b10575080611bfc565b60008881526001602090815260408083208a845282528083208584526004019091529020548690108015611bf45750600581101580611bf45750600160005060008981526020019081526020016000206000506000016000506000888152602001908152602001600020600050600401600050600082815260200190815260200160002060005060000160005054600160005060008a81526020019081526020016000206000506000016000506000898152602001908152602001600020600050600401600050600084815260200190815260200160002060005060000160005054105b15611bfc5750805b60019190910190611a8d565b611c133360006104ca565b011315611a3357600193505b838015611c2c5750600085115b15611d2a576000199250600091505b60008881526001602090815260408083208a8452909152902060050154821015611e1b57604060008181208482526004016020522054869010801590611cd457506000600160005060008a81526020019081526020016000206000506000016000506000898152602001908152602001600020600050600401600050600084815260200190815260200160002060005060010160005054115b8015611d1357506000831280611d13575060008881526001602090815260408083208a8452825280832086845260040190915280822054848352912054115b15611d1e5781925082505b60019190910190611c3b565b6000851115611a335750600087815260016020908152604080832089845290915290206007015460059081901015611e6f576001600050600089815260200190815260200160002060005060000160005060008881526020019081526020016000206000506007016000818150548092919060010191905055905080505b6005811015611a33576040805160608101825287815260208181018881523383850190815260008d815260018085528682208e835285528682208883526006019094529490942092518355519082015590516002919091018054600160a060020a03191690911790555050505050505050565b6000831215611e2d5760009350611e6a565b611e678888888887600085815260016020818152604080842088855282528084208585526004019091528220015481906125129085610557565b94505b611c1f565b600091505b60008881526001602090815260408083208a845290915290206007015482108015611ebf5750600581101580611ebf5750604060008181208382526006016020529081206001015414155b15611da85760008881526001602081815260408084208b85528252808420868552600601909152822001541415611ef7575080611fe3565b60008881526001602090815260408083208a845282528083208584526006019091529020548690118015611fdb5750600581101580611fdb5750600160005060008981526020019081526020016000206000506000016000506000888152602001908152602001600020600050600601600050600082815260200190815260200160002060005060000160005054600160005060008a81526020019081526020016000206000506000016000506000898152602001908152602001600020600050600601600050600084815260200190815260200160002060005060000160005054115b15611fe35750805b60019190910190611e74565b5090945092506127106000805b60008d81526001602090815260408083208f845290915290206007015481101561218b576040600081812083825260060160205290812060010154118015612097575082600160005060008f815260200190815260200160002060005060000160005060008e815260200190815260200160002060005060060160005060008381526020019081526020016000206000506000016000505411155b156121835760008d81526001602090815260408083208f845282528083208484526006019091529020548390101561212857600091508150600160005060008e815260200190815260200160002060005060000160005060008d8152602001908152602001600020600050600601600050600082815260200190815260200160002060005060000160005054925082505b600160005060008e815260200190815260200160002060005060000160005060008d81526020019081526020016000206000506006016000506000828152602001908152602001600020600050600101600050548201915081505b600101611ffc565b50949b939a50985092965090945050505050565b60008781526001602081815260408084208a85528252808420878552600601909152822001555b8391505b5095945050505050565b60008881526001602090815260408083208a845282528083208784526006019091528120805460029190910154929350909161222b91600160a060020a0391909116908a908a908686039061271090880204610d94565b60008981526001602090815260408083208b8452825280832088845260060190915281206002015461226991600160a060020a0391909116906104ca565b01131561219f57600087815260016020908152604080832033600160a060020a031684526003019091528120600201549482900394610100900460ff16141561233157600160016000506000898152602001908152602001600020600050600301600050600033600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff02191690830217905550600160005060008881526020019081526020016000206000506004016000818150548092919060010191905055505b60008781526001602090815260408083208984528083528184208785526006018352818420600290810154600160a060020a0316855260039190910190925282200154610100900460ff16141561246a576001600160005060008981526020019081526020016000206000506003016000506000600160005060008b815260200190815260200160002060005060000160005060008a8152602001908152602001600020600050600601600050600087815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff02191690830217905550600160005060008881526020019081526020016000206000506004016000818150548092919060010191905055505b600087815260016020818152604080842033600160a060020a039081168652600382018085528387208d885280865284882080548a0190559285528387208a8852600601855283872080549387018054612710958b028690049003905580870180548a90039055600281018054841689528287528589208f8a52875285892080548b9003905590549054909216875290935293209091018054918402929092040190556121c6565b60008881526001602090815260408083208a845282528083208784526004019091528120805460029190910154929350909161256991600160a060020a0391909116908a908a908690612710908202048603610d94565b60008981526001602090815260408083208b845282528083208884526004019091528120600201546125a791600160a060020a0391909116906104ca565b01131561285057600087815260016020908152604080832033600160a060020a031684526003019091528120600201549482900394610100900460ff16141561266f57600160016000506000898152602001908152602001600020600050600301600050600033600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff02191690830217905550600160005060008881526020019081526020016000206000506004016000818150548092919060010191905055505b60008781526001602090815260408083208984528083528184208785526004018352818420600290810154600160a060020a0316855260039190910190925282200154610100900460ff1614156127a8576001600160005060008981526020019081526020016000206000506003016000506000600160005060008b815260200190815260200160002060005060000160005060008a8152602001908152602001600020600050600401600050600087815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff02191690830217905550600160005060008881526020019081526020016000206000506004016000818150548092919060010191905055505b600087815260016020818152604080842033600160a060020a039081168652600382018085528387208d885280865284882080548a900390559285528387208a8852600401855283872080549387018054612710958b0286900401905580870180548a90039055600281018054841689528287528589208f8a52875285892080548b0190559054905490921687529093529320909101805491840292909204900390556121c6565b60008781526001602081815260408084208a85528252808420878552600401909152822001558391506121ca56","info":{"source":"contract Market {\n\n  address admin = 0x18e79a47d8a58bef5aaecbba85ea1420649c64a8;\n\n  struct Order {\n    uint price;\n    uint size;\n    address user;\n  }\n  struct Option {\n    uint id;\n    bytes32 factHash;\n    address ethAddr;\n    uint strike;\n    mapping(uint => Order) buyOrders;\n    uint numBuyOrders;\n    mapping(uint => Order) sellOrders;\n    uint numSellOrders;\n  }\n  struct Position {\n    mapping(uint => int) positions;\n    int cash;\n    bool expired;\n    bool hasPosition;\n  }\n  struct OptionChain {\n    mapping(uint => Option) options;\n    uint numOptions;\n    bool expired;\n    mapping(address => Position) positions;\n    uint numPositions;\n    uint numPositionsExpired;\n  }\n  mapping(uint => OptionChain) optionChains;\n  uint numOptionChains;\n  struct Account {\n    address user;\n    int capital;\n  }\n  mapping(uint => Account) accounts;\n  uint numAccounts;\n  mapping(address => uint) accountIDs; //starts at 1\n\n  function addFunds() {\n    if (accountIDs[msg.sender]>0) {\n      accounts[accountIDs[msg.sender]].capital += int(msg.value);\n    } else {\n      uint accountID = ++numAccounts;\n      accounts[accountID].user = msg.sender;\n      accounts[accountID].capital += int(msg.value);\n      accountIDs[msg.sender] = accountID;\n    }\n  }\n\n  function withdrawFunds(uint amount) {\n    if (accountIDs[msg.sender]>0) {\n      if (int(amount)<=getFunds(msg.sender, true)) {\n        accounts[accountIDs[msg.sender]].capital -= int(amount);\n        cancelOrders();\n        msg.sender.send(amount);\n      }\n    }\n  }\n\n  function getFunds(address user, bool onlyAvailable) constant returns(int) {\n    if (accountIDs[user]>0) {\n      if (onlyAvailable == false) {\n        return accounts[accountIDs[user]].capital;\n      } else {\n        return accounts[accountIDs[user]].capital + getMaxLossAfterTrade(user, 0, 0, 0, 0);\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  function getFundsAndAvailable(address user) constant returns(int, int) {\n    return (getFunds(user, false), getFunds(user, true));\n  }\n\n  function getMarket(address user) constant returns(uint[], uint[], uint[], int[], int[]) {\n    uint[] memory optionIDs = new uint[](30);\n    uint[] memory strikes = new uint[](30);\n    uint[] memory ids = new uint[](30);\n    int[] memory positions = new int[](30);\n    int[] memory cashes = new int[](30);\n    uint z = 0;\n    for (int optionChainID=int(numOptionChains)-1; optionChainID>=0 && z<30; optionChainID--) {\n      if (optionChains[uint(optionChainID)].expired == false) {\n        for (uint optionID=0; optionID<optionChains[uint(optionChainID)].numOptions; optionID++) {\n          optionIDs[z] = uint(optionChainID)*1000 + optionID;\n          strikes[z] = optionChains[uint(optionChainID)].options[optionID].strike;\n          ids[z] = optionChains[uint(optionChainID)].options[optionID].id;\n          positions[z] = optionChains[uint(optionChainID)].positions[user].positions[optionID];\n          cashes[z] = optionChains[uint(optionChainID)].positions[user].cash;\n          z++;\n        }\n      }\n    }\n    return (optionIDs, strikes, ids, positions, cashes);\n  }\n\n  function getMarketTopLevels() constant returns(uint[], uint[], uint[], uint[]) {\n    uint[] memory buyPrices = new uint[](30);\n    uint[] memory buySizes = new uint[](30);\n    uint[] memory sellPrices = new uint[](30);\n    uint[] memory sellSizes = new uint[](30);\n    uint z = 0;\n    for (int optionChainID=int(numOptionChains)-1; optionChainID>=0 && z<30; optionChainID--) {\n      if (optionChains[uint(optionChainID)].expired == false) {\n        for (uint optionID=0; optionID<optionChains[uint(optionChainID)].numOptions; optionID++) {\n          (buyPrices[z], buySizes[z], sellPrices[z], sellSizes[z]) = getTopLevel(uint(optionChainID), optionID);\n          z++;\n        }\n      }\n    }\n    return (buyPrices, buySizes, sellPrices, sellSizes);\n  }\n\n  function expire(uint accountID, uint optionChainID, uint8[] v, bytes32[] r, bytes32[] s, uint[] value) {\n    bool allSigned = true;\n    if (optionChains[optionChainID].expired == false) {\n      for (uint optionID=0; optionID<optionChains[optionChainID].numOptions; optionID++) {\n        address signerAddress = ecrecover(sha3(optionChains[optionChainID].options[optionID].factHash, value[optionID]), v[optionID], r[optionID], s[optionID]);\n        if (signerAddress != optionChains[optionChainID].options[optionID].ethAddr) {\n          allSigned = false;\n        }\n      }\n      if (allSigned) {\n        uint lastAccount = numAccounts;\n        if (accountID==0) {\n          accountID = 1;\n        } else {\n          lastAccount = accountID;\n        }\n        for (accountID=accountID; accountID<=lastAccount; accountID++) {\n          if (optionChains[optionChainID].positions[accounts[accountID].user].expired == false) {\n            int result = optionChains[optionChainID].positions[accounts[accountID].user].cash;\n            for (optionID=0; optionID<optionChains[optionChainID].numOptions; optionID++) {\n              result += (int(value[optionID]) * optionChains[optionChainID].positions[accounts[accountID].user].positions[optionID]);\n            }\n            accounts[accountID].capital = accounts[accountID].capital + result;\n            optionChains[optionChainID].positions[accounts[accountID].user].expired = true;\n            optionChains[optionChainID].numPositionsExpired++;\n          }\n        }\n        if (optionChains[optionChainID].numPositionsExpired == optionChains[optionChainID].numPositions) {\n          optionChains[optionChainID].expired = true;\n        }\n      }\n    }\n  }\n\n  function addOptionChain(uint existingOptionChainID, uint[] ids, uint[] strikes, bytes32[] factHashes, address[] ethAddrs) {\n    if (msg.sender==admin) {\n      uint optionChainID = 6;\n      if (numOptionChains<6) {\n        optionChainID = numOptionChains++;\n      } else {\n        for (uint i=0; i < numOptionChains && optionChainID>=6; i++) {\n          if (optionChains[i].expired==true || optionChains[i].numOptions==0) {\n            optionChainID = i;\n          }\n        }\n      }\n      if (optionChainID<6) {\n        if (existingOptionChainID<6) {\n          optionChainID = existingOptionChainID;\n        } else {\n          delete optionChains[optionChainID];\n        }\n        OptionChain optionChain = optionChains[optionChainID];\n        for (i=0; i < strikes.length; i++) {\n          if (optionChain.numOptions<5) {\n            uint optionID = optionChain.numOptions++;\n            Option option = optionChain.options[i];\n            option.id = ids[i];\n            option.strike = strikes[i];\n            option.factHash = factHashes[i];\n            option.ethAddr = ethAddrs[i];\n            optionChain.options[i] = option;\n          }\n        }\n      }\n    }\n  }\n\n  function placeBuyOrder(uint optionChainID, uint optionID, uint price, uint size) {\n    if (size % 10000 != 0) {\n      size -= size % 10000;\n    }\n    if (getFunds(msg.sender, false)+getMaxLossAfterTrade(msg.sender, optionChainID, optionID, int(size), -int(size * price / 10000))>0) {\n      bool foundMatch = true;\n      while (foundMatch && size>0) {\n        int bestPriceID = -1;\n        for (uint i=0; i<optionChains[optionChainID].options[optionID].numSellOrders; i++) {\n          if (optionChains[optionChainID].options[optionID].sellOrders[i].price<=price && optionChains[optionChainID].options[optionID].sellOrders[i].size>0 && (bestPriceID<0 || optionChains[optionChainID].options[optionID].sellOrders[i].price<optionChains[optionChainID].options[optionID].sellOrders[uint(bestPriceID)].price)) {\n            bestPriceID = int(i);\n          }\n        }\n        if (bestPriceID<0) {\n          foundMatch = false;\n        } else {\n          size = orderMatchBuy(optionChainID, optionID, price, size, uint(bestPriceID));\n        }\n      }\n      if (size>0) {\n        uint orderID = 5;\n        if (optionChains[optionChainID].options[optionID].numBuyOrders < 5) {\n          orderID = optionChains[optionChainID].options[optionID].numBuyOrders++;\n        } else {\n          for (i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders && (orderID>=5 || optionChains[optionChainID].options[optionID].buyOrders[orderID].size!=0); i++) {\n            if (optionChains[optionChainID].options[optionID].buyOrders[i].size==0) {\n              orderID = i;\n            } else if (optionChains[optionChainID].options[optionID].buyOrders[i].price<price && (orderID>=5 || (optionChains[optionChainID].options[optionID].buyOrders[i].price<optionChains[optionChainID].options[optionID].buyOrders[orderID].price))) {\n              orderID = i;\n            }\n          }\n        }\n        if (orderID<5) {\n          optionChains[optionChainID].options[optionID].buyOrders[orderID] = Order(price, size, msg.sender);\n        }\n      }\n    }\n  }\n\n  function placeSellOrder(uint optionChainID, uint optionID, uint price, uint size) {\n    if (size % 10000 != 0) {\n      size -= size % 10000;\n    }\n    if (getFunds(msg.sender, false)+getMaxLossAfterTrade(msg.sender, optionChainID, optionID, -int(size), int(size * price / 10000))>0) {\n      bool foundMatch = true;\n      while (foundMatch && size>0) {\n        int bestPriceID = -1;\n        for (uint i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders; i++) {\n          if (optionChains[optionChainID].options[optionID].buyOrders[i].price>=price && optionChains[optionChainID].options[optionID].buyOrders[i].size>0 && (bestPriceID<0 || optionChains[optionChainID].options[optionID].buyOrders[i].price>optionChains[optionChainID].options[optionID].buyOrders[uint(bestPriceID)].price)) {\n            bestPriceID = int(i);\n          }\n        }\n        if (bestPriceID<0) {\n          foundMatch = false;\n        } else {\n          size = orderMatchSell(optionChainID, optionID, price, size, uint(bestPriceID));\n        }\n      }\n      if (size>0) {\n        uint orderID = 5;\n        if (optionChains[optionChainID].options[optionID].numSellOrders < 5) {\n          orderID = optionChains[optionChainID].options[optionID].numSellOrders++;\n        } else {\n          for (i=0; i<optionChains[optionChainID].options[optionID].numSellOrders && (orderID>=5 || optionChains[optionChainID].options[optionID].sellOrders[orderID].size!=0); i++) {\n            if (optionChains[optionChainID].options[optionID].sellOrders[i].size==0) {\n              orderID = i;\n            } else if (optionChains[optionChainID].options[optionID].sellOrders[i].price>price && (orderID>=5 || (optionChains[optionChainID].options[optionID].sellOrders[i].price>optionChains[optionChainID].options[optionID].sellOrders[orderID].price))) {\n              orderID = i;\n            }\n          }\n        }\n        if (orderID<5) {\n          optionChains[optionChainID].options[optionID].sellOrders[orderID] = Order(price, size, msg.sender);\n        }\n      }\n    }\n  }\n\n  function orderMatchBuy(uint optionChainID, uint optionID, uint price, uint size, uint bestPriceID) private returns(uint) {\n    uint sizeChange = min(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size, size);\n    if (getFunds(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user, false)+getMaxLossAfterTrade(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user, optionChainID, optionID, -int(sizeChange), int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000))>0) {\n      size -= sizeChange;\n      if (optionChains[optionChainID].positions[msg.sender].hasPosition == false) {\n        optionChains[optionChainID].positions[msg.sender].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      if (optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].hasPosition == false) {\n        optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      optionChains[optionChainID].positions[msg.sender].positions[optionID] += int(sizeChange);\n      optionChains[optionChainID].positions[msg.sender].cash -= int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000);\n      optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size -= sizeChange;\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].positions[optionID] -= int(sizeChange);\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].cash += int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000);\n    } else {\n      optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size = 0;\n    }\n    return size;\n  }\n\n  function orderMatchSell(uint optionChainID, uint optionID, uint price, uint size, uint bestPriceID) private returns(uint) {\n    uint sizeChange = min(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size, size);\n    if (getFunds(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user, false)+getMaxLossAfterTrade(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user, optionChainID, optionID, int(sizeChange), -int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000))>0) {\n      size -= sizeChange;\n      if (optionChains[optionChainID].positions[msg.sender].hasPosition == false) {\n        optionChains[optionChainID].positions[msg.sender].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      if (optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].hasPosition == false) {\n        optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      optionChains[optionChainID].positions[msg.sender].positions[optionID] -= int(sizeChange);\n      optionChains[optionChainID].positions[msg.sender].cash += int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000);\n      optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size -= sizeChange;\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].positions[optionID] += int(sizeChange);\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].cash -= int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000);\n    } else {\n      optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size = 0;\n    }\n    return size;\n  }\n\n  function getTopLevel(uint optionChainID, uint optionID) private constant returns(uint, uint, uint, uint) {\n    uint buyPrice = 0;\n    uint buySize = 0;\n    uint sellPrice = 0;\n    uint sellSize = 0;\n    uint watermark = 0;\n    uint size = 0;\n    for (uint i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders; i++) {\n      if (optionChains[optionChainID].options[optionID].buyOrders[i].size>0 && optionChains[optionChainID].options[optionID].buyOrders[i].price>=watermark) {\n        if (optionChains[optionChainID].options[optionID].buyOrders[i].price>watermark) {\n          size = 0;\n          watermark = optionChains[optionChainID].options[optionID].buyOrders[i].price;\n        }\n        size += optionChains[optionChainID].options[optionID].buyOrders[i].size;\n      }\n    }\n    buyPrice = watermark;\n    buySize = size;\n    watermark = 10000;\n    size = 0;\n    for (i=0; i<optionChains[optionChainID].options[optionID].numSellOrders; i++) {\n      if (optionChains[optionChainID].options[optionID].sellOrders[i].size>0 && optionChains[optionChainID].options[optionID].sellOrders[i].price<=watermark) {\n        if (optionChains[optionChainID].options[optionID].sellOrders[i].price<watermark) {\n          size = 0;\n          watermark = optionChains[optionChainID].options[optionID].sellOrders[i].price;\n        }\n        size += optionChains[optionChainID].options[optionID].sellOrders[i].size;\n      }\n    }\n    sellPrice = watermark;\n    sellSize = size;\n    return (buyPrice, buySize, sellPrice, sellSize);\n  }\n\n  function cancelOrders() {\n    for (uint optionChainID=0; optionChainID<numOptionChains; optionChainID++) {\n      for (uint i=0; i<optionChains[optionChainID].numOptions; i++) {\n        for (uint j=0; j<optionChains[optionChainID].options[i].numBuyOrders; j++) {\n          if (optionChains[optionChainID].options[i].buyOrders[j].user==msg.sender) {\n            optionChains[optionChainID].options[i].buyOrders[j].size = 0;\n          }\n        }\n        for (j=0; j<optionChains[optionChainID].options[i].numSellOrders; j++) {\n          if (optionChains[optionChainID].options[i].sellOrders[j].user==msg.sender) {\n            optionChains[optionChainID].options[i].sellOrders[j].size = 0;\n          }\n        }\n      }\n    }\n  }\n\n  function getMaxLossAfterTrade(address user, uint optionChainID, uint optionID, int positionChange, int cashChange) constant returns(int) {\n    int totalMaxLoss = 0;\n    for (uint i=0; i<numOptionChains; i++) {\n      if (optionChains[i].expired == false) {\n        int maxLoss = 0;\n        int pnl = optionChains[i].positions[user].cash;\n        if (i==optionChainID) {\n          pnl += cashChange;\n        }\n        maxLoss = pnl;\n        for (uint j=0; j<optionChains[i].numOptions; j++) {\n          pnl += optionChains[i].positions[user].positions[j];\n          if (i==optionChainID && j==optionID) {\n            pnl += positionChange;\n          }\n          if (pnl<maxLoss) {\n            maxLoss = pnl;\n          }\n        }\n        totalMaxLoss += maxLoss;\n      }\n    }\n    return totalMaxLoss;\n  }\n\n  function changeAdmin(address newAdmin) {\n    if (msg.sender == admin) {\n      admin = newAdmin;\n    }\n  }\n\n  function min(uint a, uint b) constant returns(uint) {\n    if (a<b) {\n      return a;\n    } else {\n      return b;\n    }\n  }\n}\n","language":"Solidity","languageVersion":"0.2.0","compilerVersion":"0.2.0","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /var/folders/sj/bz257rsj0w1g7cpjjycd7wpw0000gn/T/solc396353176","abiDefinition":[{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"withdrawFunds","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"accountID","type":"uint256"},{"name":"optionChainID","type":"uint256"},{"name":"v","type":"uint8[]"},{"name":"r","type":"bytes32[]"},{"name":"s","type":"bytes32[]"},{"name":"value","type":"uint256[]"}],"name":"expire","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"cancelOrders","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"},{"name":"onlyAvailable","type":"bool"}],"name":"getFunds","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"price","type":"uint256"},{"name":"size","type":"uint256"}],"name":"placeSellOrder","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"min","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"newAdmin","type":"address"}],"name":"changeAdmin","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"addFunds","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getMarket","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"int256[]"},{"name":"","type":"int256[]"}],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getFundsAndAvailable","outputs":[{"name":"","type":"int256"},{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[],"name":"getMarketTopLevels","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"price","type":"uint256"},{"name":"size","type":"uint256"}],"name":"placeBuyOrder","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"existingOptionChainID","type":"uint256"},{"name":"ids","type":"uint256[]"},{"name":"strikes","type":"uint256[]"},{"name":"factHashes","type":"bytes32[]"},{"name":"ethAddrs","type":"address[]"}],"name":"addOptionChain","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"},{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"positionChange","type":"int256"},{"name":"cashChange","type":"int256"}],"name":"getMaxLossAfterTrade","outputs":[{"name":"","type":"int256"}],"type":"function"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}}}