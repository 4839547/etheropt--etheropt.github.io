{"Market":{"code":"0x606060405260008054600160a060020a0319167318e79a47d8a58bef5aaecbba85ea1420649c64a8178155612d9190819061003990396000f3606060405236156100b95760e060020a6000350463155dd5ee81146100bb57806322a42171146100eb578063460c1a7a1461036a57806347e0c516146104b05780635c665f891461072d57806372e18c12146107795780637ae2b5c7146107bb5780638f283970146107d6578063a26759cb14610809578063d4dfadbf1461084a578063d5544f9414610b5d578063e54aae1314610b72578063eddb00d414610e8f578063f7034bf514610ed1578063fe4667e91461101d575b005b6100b960043533600160a060020a031660009081526005602052604081205411156113d8576113db336001610737565b6040805160248035600481810135602081810286810182019097528186526100b996833596939560449501929182919085019084908082843750506040805196358089013560208181028a81018201909452818a529799986064989097506024929092019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a529799986084989097506024929092019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a5297999860a4989097506024929092019550935083925085019084908082843750505060008a8152600160208190526040822060020154959750955093849350839250829150819060ff168114156116e7575b60008b815260016020819052604090912001548510156115705760406000818120878252602052206001015487518890879081101561000257906020019060200201516040518083815260200182815260200192505050604051809103902093506001848b87815181101561000257906020019060200201518b88815181101561000257906020019060200201518b8981518110156100025790602001906020020151604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051808303816000866161da5a03f115610002575050604051805190602001509250600160005060008c8152602001908152602001600020600050600001600050600086815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031683600160a060020a031614151561035e57600095505b60019490940193610208565b6100b95b600080805b6002548310156123c457600091505b60016000506000848152602001908152602001600020600050600101600050548210156123c9575060005b60008381526001602090815260408083208584529091529020600501548110156123d55733600160a060020a0316600160005060008581526020019081526020016000206000506000016000506000848152602001908152602001600020600050600401600050600083815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031614156104a85760006001600050600085815260200190815260200160002060005060000160005060008481526020019081526020016000206000506004016000506000838152602001908152602001600020600050600101600050819055505b6001016103ad565b6040805160248035600481810135602081810286810182019097528186526100b996833596939560449501929182919085019084908082843750506040805196358089013560208181028a81018201909452818a529799986064989097506024929092019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a529799986084989097506024929092019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a5297999860a4989097506024929092019550935083925085019084908082843750505060008a815260016020819052604082206002015495975095509384935083925082915060ff16811415611a8e575b60008a815260016020819052604090912001548410156117f95760406000818120868252602052206001015486518790869081101561000257906020019060200201516040518083815260200182815260200192505050604051809103902092506001838a86815181101561000257906020019060200201518a87815181101561000257906020019060200201518a8881518110156100025790602001906020020151604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051808303816000866161da5a03f115610002575050604051805190602001509150600160005060008b8152602001908152602001600020600050600001600050600085815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031682600160a060020a031614151561072157600094505b600193909301926105cb565b61112c6004356024355b600160a060020a0382166000908152600560205260408120548190111561143b578160001415611445576040808220548252600360205290206001015461143f565b6100b9600435602435604435606435600080808080612710860681146107a3576127108606909503945b600061206b338b8b8a6000036127108d8d0204611030565b61112c6004356024355b60008183101561252557508161143f565b6100b9600435600054600160a060020a039081163390911614156113d85760008054600160a060020a0319168217905550565b6100b933600160a060020a031660009081526005602052604081205481901115611388576040808220548252600360205281206001018054340190556113d8565b61113e60043560408051602081810183526000808352835180830185528181528451808401865282815285518085018752838152865180860188528481528751808701895285815288518088018a5286815289518089018b528781528a51808a018c528881528b51998a018c52888a529a51999a9699959894979396929591949093909181908190601e908059106108df5750595b90808252806020026020018201604052509750601e6040518059106109015750595b90808252806020026020018201604052509650601e6040518059106109235750595b90808252806020026020018201604052509550601e6040518059106109455750595b90808252806020026020018201604052509450601e6040518059106109675750595b81815260209182028101909101604052600254909450600093506000190191505b600082121580156109995750601e83105b1561149b5760008281526001602052604081206002015460ff1614156114b1575060005b600082815260016020819052604090912001548110156114b15780826103e802018884815181101561000257604060008181206020848102909501850195909552858152939092529120600301548851909189918110156100025790602001906020020190908181526020015050600160005060008381526020019081526020016000206000506000016000506000828152602001908152602001600020600050600001600050548684815181101561000257906020019060200201909081815260200150506001600050600083815260200190815260200160002060005060030160005060008f600160a060020a031681526020019081526020016000206000506000016000506000828152602001908152602001600020600050548584815181101561000257906020019060200201909081815260200150506001600050600083815260200190815260200160002060005060030160005060008f600160a060020a031681526020019081526020016000206000506001016000505484848151811015610002575050602084810286010152600192830192016109bd565b61127460043560006000611487836000610737565b60408051602081810183526000808352835180830185528181528451808401865282815285518085018752838152865180860188528481528751808701895285815288518088018a5286815289518089018b528781528a51608081018c52888152988901889052888b0188905260608901889052995161128d9a969895979496939592949193928291829190601e90805910610c0b5750595b90808252806020026020018201604052509750601e604051805910610c2d5750595b90808252806020026020018201604052509650601e604051805910610c4f5750595b90808252806020026020018201604052509550601e604051805910610c715750595b81815260209182028101909101604052600254909550600094506000190192505b60008312158015610ca35750601e84105b156114be5760008381526001602052604081206002015460ff1614156114d257600091505b600083815260016020819052604090912001548210156114d2576114df8383604080516080818101835260008083526020838101829052838501829052606084810183905285519384018652828452908301829052938201819052928101839052909180805b6000878152600160209081526040808320898452909152902060050154811015612c0b576040600081812083825260040160205290812060010154118015610dc957508260016000506000898152602001908152602001600020600050600001600050600088815260200190815260200160002060005060040160005060008381526020019081526020016000206000506000016000505410155b15610e87576000878152600160209081526040808320898452825280832084845260040190915290205483901115610e5a57600091508150600160005060008881526020019081526020016000206000506000016000506000878152602001908152602001600020600050600401600050600082815260200190815260200160002060005060000160005054925082505b60008781526001602081815260408084208a85528252808420858552600401909152909120015491909101905b600101610d2e565b6100b960043560243560443560643560008080808061271086068114610eb9576127108606909503945b6000611c9c338b8b8a6127108d8d0204600003611030565b6040805160248035600481810135602081810286810182019097528186526100b996833596939560449501929182919085019084908082843750506040805196358089013560208181028a81018201909452818a529799986064989097506024929092019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a529799986084989097506024929092019550935083925085019084908082843750506040805196358089013560208181028a81018201909452818a5297999860a4989097506024929092019550935083925085019084908082843750949650505050505050600080548190819081908190600160a060020a03908116339091161415611a8e576002546006955085901015611a9a57600280546001810190915594505b6006851015611a8e5760068a1015611afc57899450611b2a565b61112c6004356024356044356064356084355b600080808080805b600254841015612505576040600090812085825260016020526002015460ff16141561251957600092506001600050600085815260200190815260200160002060005060030160005060008c600160a060020a03168152602001908152602001600020600050600101600050549150898414156110b457908601905b5090508060005b600084815260016020819052604090912001548110156125145760406000818120600160a060020a038e16825260030160209081528282208483529052205490910190898414801561110c57508881145b1561111657908701905b828212156111245781925082505b6001016110bb565b60408051918252519081900360200190f35b60405180806020018060200180602001806020018060200186810386528b8181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f15090500186810385528a8181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018681038452898181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018681038352888181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018681038252878181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019a505050505050505050505060405180910390f35b6040805192835260208301919091528051918290030190f35b60405180806020018060200180602001806020018581038552898181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038452888181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038352878181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038252868181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019850505050505050505060405180910390f35b506004805460019081019182905560008281526003602090815260408083208054600160a060020a0319163390811782559401805434019055600160a060020a0393909316825260059052208190555b50565b81136113d85733600160a060020a03166000908152600560209081526040808320548352600390915290206001018054829003905561141861036e565b60405133600160a060020a031690600090839082818181858883f1505050505050565b5060005b92915050565b611456836000600060006000611030565b600160a060020a0384166000908152600560209081526040808320548352600390915290206001015401905061143f565b611492846001610737565b91509150915091565b50959c949b509299509097509550909350505050565b6000199190910190610988565b50959a949950929750909550919350505050565b6000199290920191610c92565b9050806000015188858151811015610002576020818102909201820192909252820151885190918991811015610002579060200190602002019090818152602001505080604001518685815181101561000257906020019060200201909081815260200150508060600151858581518110156100025750506020858102870101526001938401939190910190610cc8565b85156116e75760008b815260016020526040902060048101546005919091015410156116c757600191505b60045482116116c75760008b8152600160209081526040808320858452600380845282852054600160a060020a031685520190915281206002015460ff1614156117ed57600160005060008c815260200190815260200160002060005060030160005060006003600050600085815260200190815260200160002060005060000160009054906101000a9004600160a060020a0316600160a060020a031681526020019081526020016000206000506001016000505490506000945084505b60008b815260016020819052604090912001548510156116f457604060008181208482526003602081815284842054600160a060020a031684529101815282822088835290522054875188908790811015610002576020908102909101015102016001949094019361165a565b60008b8152600160208190526040909120600201805460ff191690911790555b5050505050505050505050565b8060036000506000848152602001908152602001600020600050600101600050540160036000506000848152602001908152602001600020600050600101600050819055506001600160005060008d815260200190815260200160002060005060030160005060006003600050600086815260200190815260200160002060005060000160009054906101000a9004600160a060020a0316600160a060020a0316815260200190815260200160002060005060020160006101000a81548160ff02191690830217905550600160005060008c81526020019081526020016000206000506005016000818150548092919060010191905055505b6001919091019061159b565b84801561181c575033600160a060020a0316600090815260056020526040812054115b8015611869575060008a815260016020908152604080832033600160a060020a0390811685526005845282852054855260038085528386205490911685520190915281206002015460ff16145b15611a8e5750600089815260016020818152604080842033600160a060020a03908116865260058452828620548652600380855283872054909116865201909152822001549093505b60008a8152600160208190526040909120015484101561192f576040600081812033600160a060020a039081168352600560209081528484205484526003808252858520549092168452910181528282208783529052205486518790869081101561000257602090810290910101510201600193909301926118b2565b80600360005060006005600050600033600160a060020a031681526020019081526020016000206000505481526020019081526020016000206000506001016000505401600360005060006005600050600033600160a060020a03168152602001908152602001600020600050548152602001908152602001600020600050600101600050819055506001600160005060008c81526020019081526020016000206000506003016000506000600360005060006005600050600033600160a060020a0316815260200190815260200160002060005054815260200190815260200160002060005060000160009054906101000a9004600160a060020a0316600160a060020a0316815260200190815260200160002060005060020160006101000a81548160ff02191690830217905550600160005060008b81526020019081526020016000206000506005016000818150548092919060010191905055505b50505050505050505050565b600093505b60025484108015611ab1575060068510155b156110035760008481526001602081905260409091206002015460ff161480611ae557506040600090812085825260010154145b15611af05783945084505b60019390930192611a9f565b6000858152600160208190526040822090810182905560028101805460ff1916905560048101829055600501555b600085815260016020526040812090945092505b8751841015611a8e575050600181810180549182019055600083815260208390526040902088518990859081101561000257602090810290910101518155875188908590811015610002576020908102909101015160038201558651879085908110156100025760209081029091010151600182015585518690859081101561000257906020019060200201518160020160006101000a815481600160a060020a03021916908302179055508083600001600050600086815260200190815260200160002060005060008201600050548160000160005055600182016000505481600101600050556002820160009054906101000a9004600160a060020a03168160020160006101000a815481600160a060020a030219169083021790555060038201600050548160030160005055600582016000505481600501600050556007820160005054816007016000505590505060019390930192611b3e565b611ca7336000610737565b011315611f0657600194505b848015611cc05750600086115b15611e3a576000199350600092505b60008981526001602090815260408083208b8452909152902060070154831015611f1157604060008181208582526006016020522054879011801590611d6857506000600160005060008b815260200190815260200160002060005060000160005060008a8152602001908152602001600020600050600601600050600085815260200190815260200160002060005060010160005054115b8015611e2357506000841280611e235750600160005060008a81526020019081526020016000206000506000016000506000898152602001908152602001600020600050600601600050600085815260200190815260200160002060005060000160005054600160005060008b815260200190815260200160002060005060000160005060008a8152602001908152602001600020600050600601600050600085815260200190815260200160002060005060000160005054105b15611e2e5782935083505b60019290920191611ccf565b6000861115611f065760008981526001602090815260408083208b8452909152902060059081015490925082901015611f5c57600160005060008a815260200190815260200160002060005060000160005060008981526020019081526020016000206000506005016000818150548092919060010191905055915081505b6005821015611f06575060008881526001602081815260408084208b85528252808420858552600401909152909120878155908101869055600281018054600160a060020a031916331790555b505050505050505050565b6000841215611f235760009450611f57565b6040600081812086825260060160205290812060010154611f54918b918b918b918b918a91819061256190856107c5565b95505b611cb3565b600092505b60008981526001602090815260408083208b8452909152902060050154831015611eb957604060008181208582526004016020522054879010801561205657506005821015806120565750600160005060008a81526020019081526020016000206000506000016000506000898152602001908152602001600020600050600401600050600083815260200190815260200160002060005060000160005054600160005060008b815260200190815260200160002060005060000160005060008a8152602001908152602001600020600050600401600050600085815260200190815260200160002060005060000160005054105b1561205f578291505b60019290920191611f61565b612076336000610737565b011315611f0657600194505b84801561208f5750600086115b1561218d576000199350600092505b60008981526001602090815260408083208b84529091529020600501548310156122615760406000818120858252600401602052205487901080159061213757506000600160005060008b815260200190815260200160002060005060000160005060008a8152602001908152602001600020600050600401600050600085815260200190815260200160002060005060010160005054115b801561217657506000841280612176575060008981526001602090815260408083208b8452825280832087845260040190915280822054858352912054115b156121815782935083505b6001929092019161209e565b6000861115611f065760008981526001602090815260408083208b845290915290206007015460059250829010156122b557600160005060008a815260200190815260200160002060005060000160005060008981526020019081526020016000206000506007016000818150548092919060010191905055915081505b6005821015611f0657506000978852600160208181526040808b20998b52988152888a20928a52600692909201909152959096209384555050918101919091556002018054600160a060020a0319163317905550565b600084121561227357600094506122b0565b6122ad89898989886000858152600160208181526040808420888552825280842085855260040190915282200154819061289f90856107c5565b95505b612082565b600092505b60008981526001602090815260408083208b845290915290206007015483101561220b5760406000818120858252600601602052205487901180156123af57506005821015806123af5750600160005060008a81526020019081526020016000206000506000016000506000898152602001908152602001600020600050600601600050600083815260200190815260200160002060005060000160005054600160005060008b815260200190815260200160002060005060000160005060008a8152602001908152602001600020600050600601600050600085815260200190815260200160002060005060000160005054115b156123b8578291505b600192909201916122ba565b505050565b60019290920191610373565b5060005b600160005060008481526020019081526020016000206000506000016000506000838152602001908152602001600020600050600701600050548110156124f95733600160a060020a0316600160005060008581526020019081526020016000206000506000016000506000848152602001908152602001600020600050600601600050600083815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031614156124f15760006001600050600085815260200190815260200160002060005060000160005060008481526020019081526020016000206000506006016000506000838152602001908152602001600020600050600101600050819055505b6001016123d9565b60019190910190610382565b50929998505050505050505050565b938201935b60019390930192611038565b508061143f565b60008781526001602081815260408084208a85528252808420878552600601909152822001555b8391505b5095945050505050565b60008881526001602090815260408083208a84528252808320878452600601909152812080546002919091015492935090916125b891600160a060020a0391909116908a908a908686039061271090880204611030565b60008981526001602090815260408083208b845282528083208884526006019091528120600201546125f691600160a060020a039190911690610737565b01131561252c57600087815260016020908152604080832033600160a060020a031684526003019091528120600201549482900394610100900460ff1614156126be57600160016000506000898152602001908152602001600020600050600301600050600033600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff02191690830217905550600160005060008881526020019081526020016000206000506004016000818150548092919060010191905055505b60008781526001602090815260408083208984528083528184208785526006018352818420600290810154600160a060020a0316855260039190910190925282200154610100900460ff1614156127f7576001600160005060008981526020019081526020016000206000506003016000506000600160005060008b815260200190815260200160002060005060000160005060008a8152602001908152602001600020600050600601600050600087815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff02191690830217905550600160005060008881526020019081526020016000206000506004016000818150548092919060010191905055505b600087815260016020818152604080842033600160a060020a039081168652600382018085528387208d885280865284882080548a0190559285528387208a8852600601855283872080549387018054612710958b028690049003905580870180548a90039055600281018054841689528287528589208f8a52875285892080548b900390559054905490921687529093529320909101805491840292909204019055612553565b60008881526001602090815260408083208a84528252808320878452600401909152812080546002919091015492935090916128f691600160a060020a0391909116908a908a908690612710908202048603611030565b60008981526001602090815260408083208b8452825280832088845260040190915281206002015461293491600160a060020a039190911690610737565b011315612bdd57600087815260016020908152604080832033600160a060020a031684526003019091528120600201549482900394610100900460ff1614156129fc57600160016000506000898152602001908152602001600020600050600301600050600033600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff02191690830217905550600160005060008881526020019081526020016000206000506004016000818150548092919060010191905055505b60008781526001602090815260408083208984528083528184208785526004018352818420600290810154600160a060020a0316855260039190910190925282200154610100900460ff161415612b35576001600160005060008981526020019081526020016000206000506003016000506000600160005060008b815260200190815260200160002060005060000160005060008a8152602001908152602001600020600050600401600050600087815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff02191690830217905550600160005060008881526020019081526020016000206000506004016000818150548092919060010191905055505b600087815260016020818152604080842033600160a060020a039081168652600382018085528387208d885280865284882080548a900390559285528387208a8852600401855283872080549387018054612710958b0286900401905580870180548a90039055600281018054841689528287528589208f8a52875285892080548b019055905490549092168752909352932090910180549184029290920490039055612553565b60008781526001602081815260408084208a8552825280842087855260040190915282200155839150612557565b5090825260208201526127106000805b6000878152600160209081526040808320898452909152902060070154811015612d7c576040600081812083825260060160205290812060010154118015612cb657508260016000506000898152602001908152602001600020600050600001600050600088815260200190815260200160002060005060060160005060008381526020019081526020016000206000506000016000505411155b15612d74576000878152600160209081526040808320898452825280832084845260060190915290205483901015612d4757600091508150600160005060008881526020019081526020016000206000506000016000506000878152602001908152602001600020600050600601600050600082815260200190815260200160002060005060000160005054925082505b60008781526001602081815260408084208a85528252808420858552600601909152909120015491909101905b600101612c1b565b5060408301919091526060820152939250505056","info":{"source":"contract Market {\n\n  address admin = 0x18e79a47d8a58bef5aaecbba85ea1420649c64a8;\n\n  struct Order {\n    uint price;\n    uint size;\n    address user;\n  }\n  struct Option {\n    uint id;\n    bytes32 factHash;\n    address ethAddr;\n    uint strike;\n    mapping(uint => Order) buyOrders;\n    uint numBuyOrders;\n    mapping(uint => Order) sellOrders;\n    uint numSellOrders;\n  }\n  struct TopLevel {\n    uint buyPrice;\n    uint buySize;\n    uint sellPrice;\n    uint sellSize;\n  }\n  struct Position {\n    mapping(uint => int) positions;\n    int cash;\n    bool expired;\n    bool hasPosition;\n  }\n  struct OptionChain {\n    mapping(uint => Option) options;\n    uint numOptions;\n    bool expired;\n    mapping(address => Position) positions;\n    uint numPositions;\n    uint numPositionsExpired;\n  }\n  mapping(uint => OptionChain) optionChains;\n  uint numOptionChains;\n  struct Account {\n    address user;\n    int capital;\n  }\n  mapping(uint => Account) accounts;\n  uint numAccounts;\n  mapping(address => uint) accountIDs; //starts at 1\n\n  function addFunds() {\n    if (accountIDs[msg.sender]>0) {\n      accounts[accountIDs[msg.sender]].capital += int(msg.value);\n    } else {\n      uint accountID = ++numAccounts;\n      accounts[accountID].user = msg.sender;\n      accounts[accountID].capital += int(msg.value);\n      accountIDs[msg.sender] = accountID;\n    }\n  }\n\n  function withdrawFunds(uint amount) {\n    if (accountIDs[msg.sender]>0) {\n      if (int(amount)<=getFunds(msg.sender, true)) {\n        accounts[accountIDs[msg.sender]].capital -= int(amount);\n        cancelOrders();\n        msg.sender.send(amount);\n      }\n    }\n  }\n\n  function getFunds(address user, bool onlyAvailable) constant returns(int) {\n    if (accountIDs[user]>0) {\n      if (onlyAvailable == false) {\n        return accounts[accountIDs[user]].capital;\n      } else {\n        return accounts[accountIDs[user]].capital + getMaxLossAfterTrade(user, 0, 0, 0, 0);\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  function getFundsAndAvailable(address user) constant returns(int, int) {\n    return (getFunds(user, false), getFunds(user, true));\n  }\n\n  function getMarket(address user) constant returns(uint[], uint[], uint[], int[], int[]) {\n    uint[] memory optionIDs = new uint[](30);\n    uint[] memory strikes = new uint[](30);\n    uint[] memory ids = new uint[](30);\n    int[] memory positions = new int[](30);\n    int[] memory cashes = new int[](30);\n    uint z = 0;\n    for (int optionChainID=int(numOptionChains)-1; optionChainID>=0 && z<30; optionChainID--) {\n      if (optionChains[uint(optionChainID)].expired == false) {\n        for (uint optionID=0; optionID<optionChains[uint(optionChainID)].numOptions; optionID++) {\n          optionIDs[z] = uint(optionChainID)*1000 + optionID;\n          strikes[z] = optionChains[uint(optionChainID)].options[optionID].strike;\n          ids[z] = optionChains[uint(optionChainID)].options[optionID].id;\n          positions[z] = optionChains[uint(optionChainID)].positions[user].positions[optionID];\n          cashes[z] = optionChains[uint(optionChainID)].positions[user].cash;\n          z++;\n        }\n      }\n    }\n    return (optionIDs, strikes, ids, positions, cashes);\n  }\n\n  function getMarketTopLevels() constant returns(uint[], uint[], uint[], uint[]) {\n    uint[] memory buyPrices = new uint[](30);\n    uint[] memory buySizes = new uint[](30);\n    uint[] memory sellPrices = new uint[](30);\n    uint[] memory sellSizes = new uint[](30);\n    uint z = 0;\n    for (int optionChainID=int(numOptionChains)-1; optionChainID>=0 && z<30; optionChainID--) {\n      if (optionChains[uint(optionChainID)].expired == false) {\n        for (uint optionID=0; optionID<optionChains[uint(optionChainID)].numOptions; optionID++) {\n          TopLevel memory topLevel = getTopLevel(uint(optionChainID), optionID);\n          buyPrices[z] = topLevel.buyPrice;\n          buySizes[z] = topLevel.buySize;\n          sellPrices[z] = topLevel.sellPrice;\n          sellSizes[z] = topLevel.sellSize;\n          z++;\n        }\n      }\n    }\n    return (buyPrices, buySizes, sellPrices, sellSizes);\n  }\n\n  function expire(uint optionChainID, uint8[] v, bytes32[] r, bytes32[] s, uint[] value) {\n    bool allSigned = true;\n    if (optionChains[optionChainID].expired == false) {\n      for (uint optionID=0; optionID<optionChains[optionChainID].numOptions; optionID++) {\n        bytes32 hash = sha3(optionChains[optionChainID].options[optionID].factHash, value[optionID]);\n        address signerAddress = ecrecover(hash, v[optionID], r[optionID], s[optionID]);\n        if (signerAddress != optionChains[optionChainID].options[optionID].ethAddr) {\n          allSigned = false;\n        }\n      }\n      if (allSigned) {\n        if (optionChains[optionChainID].numPositionsExpired < optionChains[optionChainID].numPositions) {\n          for (uint accountID=1; accountID<=numAccounts; accountID++) {\n            if (optionChains[optionChainID].positions[accounts[accountID].user].expired == false) {\n              int result = optionChains[optionChainID].positions[accounts[accountID].user].cash;\n              for (optionID=0; optionID<optionChains[optionChainID].numOptions; optionID++) {\n                result += (int(value[optionID]) * optionChains[optionChainID].positions[accounts[accountID].user].positions[optionID]);\n              }\n              accounts[accountID].capital = accounts[accountID].capital + result;\n              optionChains[optionChainID].positions[accounts[accountID].user].expired = true;\n              optionChains[optionChainID].numPositionsExpired++;\n            }\n          }\n        }\n        optionChains[optionChainID].expired = true;\n      }\n    }\n  }\n\n  function expireUser(uint optionChainID, uint8[] v, bytes32[] r, bytes32[] s, uint[] value) {\n    bool allSigned = true;\n    if (optionChains[optionChainID].expired == false) {\n      for (uint optionID=0; optionID<optionChains[optionChainID].numOptions; optionID++) {\n        bytes32 hash = sha3(optionChains[optionChainID].options[optionID].factHash, value[optionID]);\n        address signerAddress = ecrecover(hash, v[optionID], r[optionID], s[optionID]);\n        if (signerAddress != optionChains[optionChainID].options[optionID].ethAddr) {\n          allSigned = false;\n        }\n      }\n      if (allSigned && accountIDs[msg.sender]>0 && optionChains[optionChainID].positions[accounts[accountIDs[msg.sender]].user].expired == false) {\n        int result = optionChains[optionChainID].positions[accounts[accountIDs[msg.sender]].user].cash;\n        for (optionID=0; optionID<optionChains[optionChainID].numOptions; optionID++) {\n          result += (int(value[optionID]) * optionChains[optionChainID].positions[accounts[accountIDs[msg.sender]].user].positions[optionID]);\n        }\n        accounts[accountIDs[msg.sender]].capital = accounts[accountIDs[msg.sender]].capital + result;\n        optionChains[optionChainID].positions[accounts[accountIDs[msg.sender]].user].expired = true;\n        optionChains[optionChainID].numPositionsExpired++;\n      }\n    }\n  }\n\n  function addOptionChain(uint existingOptionChainID, uint[] ids, uint[] strikes, bytes32[] factHashes, address[] ethAddrs) {\n    if (msg.sender==admin) {\n      uint optionChainID = 6;\n      if (numOptionChains<6) {\n        optionChainID = numOptionChains++;\n      } else {\n        for (uint i=0; i < numOptionChains && optionChainID>=6; i++) {\n          if (optionChains[i].expired==true || optionChains[i].numOptions==0) {\n            optionChainID = i;\n          }\n        }\n      }\n      if (optionChainID<6) {\n        if (existingOptionChainID<6) {\n          optionChainID = existingOptionChainID;\n        } else {\n          delete optionChains[optionChainID];\n        }\n        OptionChain optionChain = optionChains[optionChainID];\n        for (i=0; i < strikes.length; i++) {\n          uint optionID = optionChain.numOptions++;\n          Option option = optionChain.options[i];\n          option.id = ids[i];\n          option.strike = strikes[i];\n          option.factHash = factHashes[i];\n          option.ethAddr = ethAddrs[i];\n          optionChain.options[i] = option;\n        }\n      }\n    }\n  }\n\n  function placeBuyOrder(uint optionChainID, uint optionID, uint price, uint size) {\n    if (size % 10000 != 0) {\n      size -= size % 10000;\n    }\n    if (getFunds(msg.sender, false)+getMaxLossAfterTrade(msg.sender, optionChainID, optionID, int(size), -int(size * price / 10000))>0) {\n      bool foundMatch = true;\n      while (foundMatch && size>0) {\n        int bestPriceID = -1;\n        for (uint i=0; i<optionChains[optionChainID].options[optionID].numSellOrders; i++) {\n          if (optionChains[optionChainID].options[optionID].sellOrders[i].price<=price && optionChains[optionChainID].options[optionID].sellOrders[i].size>0 && (bestPriceID<0 || optionChains[optionChainID].options[optionID].sellOrders[i].price<optionChains[optionChainID].options[optionID].sellOrders[uint(bestPriceID)].price)) {\n            bestPriceID = int(i);\n          }\n        }\n        if (bestPriceID<0) {\n          foundMatch = false;\n        } else {\n          size = orderMatchBuy(optionChainID, optionID, price, size, uint(bestPriceID));\n        }\n      }\n      if (size>0) {\n        uint orderID = 5;\n        if (optionChains[optionChainID].options[optionID].numBuyOrders < 5) {\n          orderID = optionChains[optionChainID].options[optionID].numBuyOrders++;\n        } else {\n          for (i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders; i++) {\n            if (optionChains[optionChainID].options[optionID].buyOrders[i].price<price && (orderID>=5 || optionChains[optionChainID].options[optionID].buyOrders[i].price<optionChains[optionChainID].options[optionID].buyOrders[orderID].price)) {\n              orderID = i;\n            }\n          }\n        }\n        if (orderID<5) {\n          Order order = optionChains[optionChainID].options[optionID].buyOrders[orderID];\n          order.price = price;\n          order.size = size;\n          order.user = msg.sender;\n        }\n      }\n    }\n  }\n\n  function placeSellOrder(uint optionChainID, uint optionID, uint price, uint size) {\n    if (size % 10000 != 0) {\n      size -= size % 10000;\n    }\n    if (getFunds(msg.sender, false)+getMaxLossAfterTrade(msg.sender, optionChainID, optionID, -int(size), int(size * price / 10000))>0) {\n      bool foundMatch = true;\n      while (foundMatch && size>0) {\n        int bestPriceID = -1;\n        for (uint i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders; i++) {\n          if (optionChains[optionChainID].options[optionID].buyOrders[i].price>=price && optionChains[optionChainID].options[optionID].buyOrders[i].size>0 && (bestPriceID<0 || optionChains[optionChainID].options[optionID].buyOrders[i].price>optionChains[optionChainID].options[optionID].buyOrders[uint(bestPriceID)].price)) {\n            bestPriceID = int(i);\n          }\n        }\n        if (bestPriceID<0) {\n          foundMatch = false;\n        } else {\n          size = orderMatchSell(optionChainID, optionID, price, size, uint(bestPriceID));\n        }\n      }\n      if (size>0) {\n        uint orderID = 5;\n        if (optionChains[optionChainID].options[optionID].numSellOrders < 5) {\n          orderID = optionChains[optionChainID].options[optionID].numSellOrders++;\n        } else {\n          for (i=0; i<optionChains[optionChainID].options[optionID].numSellOrders; i++) {\n            if (optionChains[optionChainID].options[optionID].sellOrders[i].price>price && (orderID>=5 || optionChains[optionChainID].options[optionID].sellOrders[i].price>optionChains[optionChainID].options[optionID].sellOrders[orderID].price)) {\n              orderID = i;\n            }\n          }\n        }\n        if (orderID<5) {\n          Order order = optionChains[optionChainID].options[optionID].sellOrders[orderID];\n          order.price = price;\n          order.size = size;\n          order.user = msg.sender;\n        }\n      }\n    }\n  }\n\n  function orderMatchBuy(uint optionChainID, uint optionID, uint price, uint size, uint bestPriceID) private returns(uint) {\n    uint sizeChange = min(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size, size);\n    if (getFunds(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user, false)+getMaxLossAfterTrade(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user, optionChainID, optionID, -int(sizeChange), int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000))>0) {\n      size -= sizeChange;\n      if (optionChains[optionChainID].positions[msg.sender].hasPosition == false) {\n        optionChains[optionChainID].positions[msg.sender].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      if (optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].hasPosition == false) {\n        optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      optionChains[optionChainID].positions[msg.sender].positions[optionID] += int(sizeChange);\n      optionChains[optionChainID].positions[msg.sender].cash -= int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000);\n      optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size -= sizeChange;\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].positions[optionID] -= int(sizeChange);\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].cash += int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000);\n    } else {\n      optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size = 0;\n    }\n    return size;\n  }\n\n  function orderMatchSell(uint optionChainID, uint optionID, uint price, uint size, uint bestPriceID) private returns(uint) {\n    uint sizeChange = min(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size, size);\n    if (getFunds(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user, false)+getMaxLossAfterTrade(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user, optionChainID, optionID, int(sizeChange), -int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000))>0) {\n      size -= sizeChange;\n      if (optionChains[optionChainID].positions[msg.sender].hasPosition == false) {\n        optionChains[optionChainID].positions[msg.sender].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      if (optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].hasPosition == false) {\n        optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      optionChains[optionChainID].positions[msg.sender].positions[optionID] -= int(sizeChange);\n      optionChains[optionChainID].positions[msg.sender].cash += int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000);\n      optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size -= sizeChange;\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].positions[optionID] += int(sizeChange);\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].cash -= int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000);\n    } else {\n      optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size = 0;\n    }\n    return size;\n  }\n\n  function getTopLevel(uint optionChainID, uint optionID) private constant returns(TopLevel) {\n    TopLevel memory topLevel;\n    uint watermark = 0;\n    uint size = 0;\n    for (uint i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders; i++) {\n      if (optionChains[optionChainID].options[optionID].buyOrders[i].size>0 && optionChains[optionChainID].options[optionID].buyOrders[i].price>=watermark) {\n        if (optionChains[optionChainID].options[optionID].buyOrders[i].price>watermark) {\n          size = 0;\n          watermark = optionChains[optionChainID].options[optionID].buyOrders[i].price;\n        }\n        size += optionChains[optionChainID].options[optionID].buyOrders[i].size;\n      }\n    }\n    topLevel.buyPrice = watermark;\n    topLevel.buySize = size;\n    watermark = 10000;\n    size = 0;\n    for (i=0; i<optionChains[optionChainID].options[optionID].numSellOrders; i++) {\n      if (optionChains[optionChainID].options[optionID].sellOrders[i].size>0 && optionChains[optionChainID].options[optionID].sellOrders[i].price<=watermark) {\n        if (optionChains[optionChainID].options[optionID].sellOrders[i].price<watermark) {\n          size = 0;\n          watermark = optionChains[optionChainID].options[optionID].sellOrders[i].price;\n        }\n        size += optionChains[optionChainID].options[optionID].sellOrders[i].size;\n      }\n    }\n    topLevel.sellPrice = watermark;\n    topLevel.sellSize = size;\n    return topLevel;\n  }\n\n  function cancelOrders() {\n    for (uint optionChainID=0; optionChainID<numOptionChains; optionChainID++) {\n      for (uint i=0; i<optionChains[optionChainID].numOptions; i++) {\n        for (uint j=0; j<optionChains[optionChainID].options[i].numBuyOrders; j++) {\n          if (optionChains[optionChainID].options[i].buyOrders[j].user==msg.sender) {\n            optionChains[optionChainID].options[i].buyOrders[j].size = 0;\n          }\n        }\n        for (j=0; j<optionChains[optionChainID].options[i].numSellOrders; j++) {\n          if (optionChains[optionChainID].options[i].sellOrders[j].user==msg.sender) {\n            optionChains[optionChainID].options[i].sellOrders[j].size = 0;\n          }\n        }\n      }\n    }\n  }\n\n  function getMaxLossAfterTrade(address user, uint optionChainID, uint optionID, int positionChange, int cashChange) constant returns(int) {\n    int totalMaxLoss = 0;\n    for (uint i=0; i<numOptionChains; i++) {\n      if (optionChains[i].expired == false) {\n        int maxLoss = 0;\n        int pnl = optionChains[i].positions[user].cash;\n        if (i==optionChainID) {\n          pnl += cashChange;\n        }\n        maxLoss = pnl;\n        for (uint j=0; j<optionChains[i].numOptions; j++) {\n          pnl += optionChains[i].positions[user].positions[j];\n          if (i==optionChainID && j==optionID) {\n            pnl += positionChange;\n          }\n          if (pnl<maxLoss) {\n            maxLoss = pnl;\n          }\n        }\n        totalMaxLoss += maxLoss;\n      }\n    }\n    return totalMaxLoss;\n  }\n\n  function changeAdmin(address newAdmin) {\n    if (msg.sender == admin) {\n      admin = newAdmin;\n    }\n  }\n\n  function min(uint a, uint b) constant returns(uint) {\n    if (a<b) {\n      return a;\n    } else {\n      return b;\n    }\n  }\n}\n","language":"Solidity","languageVersion":"0.2.0","compilerVersion":"0.2.0","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /var/folders/sj/bz257rsj0w1g7cpjjycd7wpw0000gn/T/solc161158929","abiDefinition":[{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"withdrawFunds","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"v","type":"uint8[]"},{"name":"r","type":"bytes32[]"},{"name":"s","type":"bytes32[]"},{"name":"value","type":"uint256[]"}],"name":"expire","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"cancelOrders","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"v","type":"uint8[]"},{"name":"r","type":"bytes32[]"},{"name":"s","type":"bytes32[]"},{"name":"value","type":"uint256[]"}],"name":"expireUser","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"},{"name":"onlyAvailable","type":"bool"}],"name":"getFunds","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"price","type":"uint256"},{"name":"size","type":"uint256"}],"name":"placeSellOrder","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"min","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"newAdmin","type":"address"}],"name":"changeAdmin","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"addFunds","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getMarket","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"int256[]"},{"name":"","type":"int256[]"}],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getFundsAndAvailable","outputs":[{"name":"","type":"int256"},{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[],"name":"getMarketTopLevels","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"price","type":"uint256"},{"name":"size","type":"uint256"}],"name":"placeBuyOrder","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"existingOptionChainID","type":"uint256"},{"name":"ids","type":"uint256[]"},{"name":"strikes","type":"uint256[]"},{"name":"factHashes","type":"bytes32[]"},{"name":"ethAddrs","type":"address[]"}],"name":"addOptionChain","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"},{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"positionChange","type":"int256"},{"name":"cashChange","type":"int256"}],"name":"getMaxLossAfterTrade","outputs":[{"name":"","type":"int256"}],"type":"function"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}}}