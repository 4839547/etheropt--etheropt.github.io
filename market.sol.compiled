{"Market":{"code":"0x6060604052612a1e806100126000396000f3606060405236156100c45760e060020a600035046303cf4fd681146100c6578063155dd5ee14610190578063177766e6146101c0578063460c1a7a1461026c5780635c665f89146103cf57806369d79ad51461041b57806372e18c12146104895780637ae2b5c7146104b4578063a26759cb146104cf578063d4dfadbf14610510578063d5544f9414610794578063e54aae13146107a9578063ec0b415314610a70578063eddb00d414610aa1578063ee5f013e14610acc578063fe4667e914610ba7575b005b6100c460043560243560443560643560843560a43560008581526020819052604081206008015481908190819060ff1681141561106e57604080822081516005820154600492909201548152602081810189905283519182900384018220825260ff8c16828201528184018b9052606082018a90529251600160a060020a039290921692600192608083810193829003018187866161da5a03f11561000257505060405151600160a060020a0316141561106e57600354935089811415610f275760019950610f2b565b6100c460043533600160a060020a03166000908152600460205260408120541115612012576120153360016103d9565b610d676004356040805160208181018352600080835284815280825283812060048101546002828101546001848101805486548b51600389015460059099015494831615610100026000190190921695909504601f81018a90048a0282018a01909b528a815296998a98899889988998949695909493600160a060020a0391909116928791908301828280156120fe5780601f106120d3576101008083540402835291602001916120fe565b6100c45b600080805b600154831015611c2f57600091505b6000600050600084815260200190815260200160002060005060070160005054821015611c34575060005b60006000506000848152602001908152602001600020600050600601600050600083815260200190815260200160002060005060020160005054811015611c405733600160a060020a0316600060005060008581526020019081526020016000206000506006016000506000848152602001908152602001600020600050600101600050600083815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031614156103c75760006000600050600085815260200190815260200160002060005060060160005060008481526020019081526020016000206000506001016000506000838152602001908152602001600020600050600101600050819055505b6001016102af565b610e016004356024355b600160a060020a0382166000908152600460205260408120548190111561207557816000141561207d5760408082205482526002602052902060010154611fbc565b610e0160043560243560443560643560843560a4355b600080805b600085815260208190526040902060070154811015611f1c5760406000818120838252600681016020908152928220548883529190925260029190910154670de0b6b3a764000091611f28918790610a7d565b6100c46004356024356044356064356000600060006000600061183c338a8a896000038b8b02610bba565b610e016004356024355b600081831015611fb9575081611fbc565b6100c433600160a060020a031660009081526004602052604081205481901115611fc257604080822054825260026020528120600101805434019055612012565b610e1360043560408051602081810183526000808352835180830185528181528451808401865282815285518085018752838152865180860188528481528751808701895285815288518088018a5286815289519788018a5286885298519798949793969295919490939092919081908190603c9080591061058f5750595b90808252806020026020018201604052509650603c6040518059106105b15750595b90808252806020026020018201604052509550603c6040518059106105d35750595b90808252806020026020018201604052509450603c6040518059106105f55750595b81815260209182028101909101604052600154909450600093506000190191505b600082121580156106275750603c83105b1561211a5760008281526020819052604081206008015460ff16141561212d575060005b60008281526020819052604090206007015481101561212d5780826103e80201878481518110156100025760406000818120602084810290950185019590955285815260069490940190925291205487519091889181101561000257906020019060200201909081815260200150506000600050600083815260200190815260200160002060005060090160005060008d600160a060020a031681526020019081526020016000206000506000016000506000828152602001908152602001600020600050548584815181101561000257906020019060200201909081815260200150506000600050600083815260200190815260200160002060005060090160005060008d600160a060020a0316815260200190815260200160002060005060010160005054848481518110156100025750506020848102860101526001928301920161064b565b610f0e600435600060006120bf8360006103d9565b60408051602081810183526000808352835180830185528181528451808401865282815285518085018752838152865180860188528481528751808701895285815288518088018a5286815289519788018a528688529851610e1399959794969395929491939081908190603c908059106108215750595b90808252806020026020018201604052509650603c6040518059106108435750595b90808252806020026020018201604052509550603c6040518059106108655750595b90808252806020026020018201604052509450603c6040518059106108875750595b81815260209182028101909101604052600154909450600093506000190191505b600082121580156108b95750603c83105b156121395760008281526020819052604081206008015460ff16141561214b575060005b60008281526020819052604090206007015481101561214b5761215782826000808080808080808080805b60008d8152602081815260408083208f845260060190915290206002015481101561289857604060008181208382526001908101602052918120909101541180156109a6575082600060005060008f815260200190815260200160002060005060060160005060008e815260200190815260200160002060005060010160005060008381526020019081526020016000206000506000016000505410155b15610a685760008d8152602081815260408083208f8452600601825280832084845260010190915290205483901115610a3857600091508150600060005060008e815260200190815260200160002060005060060160005060008d8152602001908152602001600020600050600101600050600082815260200190815260200160002060005060000160005054925082505b60008d8152602081815260408083208f845260060182528083208484526001908101909252909120015491909101905b600101610908565b610e016004356024356044355b6000808412611134578383111561115957818484031015611164575082820361115d565b6100c460043560243560443560643560006000600060006000611445338a8a898b8b02600003610bba565b604080516020604435600481810135601f81018490048402850184019095528484526100c4948135946024803595939460649492939101918190840183828082843750506040805160e435808a013560208181028085018201909552818452989a9935996084359960a435995060c4359850909650610104955092936024929092019290918291850190849080828437509496505050505050506000600060006000600693506006600160005054101561116b576001805480820190915593505b60068410156114375760068c10156111cc578b93506112f1565b610e016004356024356044356064356084355b6000808080808080805b600154861015611d01576000600050600087815260200190815260200160002060005060090160005060008e600160a060020a0316815260200190815260200160002060005060020160009054906101000a900460ff166000148015610c49575060006000600050600088815260200190815260200160002060005060070160005054115b15611d17576000945060009350600092505b600086815260208190526040902060070154831015611d1257670de0b6b3a76400006000600050600088815260200190815260200160002060005060090160005060008f600160a060020a03168152602001908152602001600020600050600101600050540591508b861415610cdb57670de0b6b3a76400008905909101905b600090506000600060005060008881526020019081526020016000206000506006016000506000858152602001908152602001600020600050600001600050541215611d23576000600050600087815260200190815260200160002060005060060160005060008481526020019081526020016000206000506000016000505460000390508050611d40565b604051808781526020018060200186815260200185815260200184815260200183600160a060020a031681526020018281038252878181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f168015610dee5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b60408051918252519081900360200190f35b60405180806020018060200180602001806020018581038552898181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038452888181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038352878181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038252868181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019850505050505050505060405180910390f35b6040805192835260208301919091528051918290030190f35b8993505b838a1161103b576000898152602081815260408083208d8452600280845282852054600160a060020a031685526009919091019092528220015460ff1614156110d357670de0b6b3a7640000600060005060008b81526020019081526020016000206000506009016000506000600260005060008e815260200190815260200160002060005060000160009054906101000a9004600160a060020a0316600160a060020a0316815260200190815260200160002060005060010160005054059250600091505b60008981526020819052604090206007015482101561107a5760406000818120848252600681016020908152928220548c835291909252600291909101546110df91908790610a7d565b6000898152602081905260409020600a810154600b90910154141561106e576040600020600801805460ff191660011790555b50505050505050505050565b60008a8152600260208181526040808420600181810180548a0190558e86528584528286209154600160a060020a03168652600982018452918520909301805460ff1916821790558c8452929052600b01805490910190555b60019990990198610f2b565b60008a8152602081815260408083208e84526002835281842054600160a060020a031684526009018252808320868452909152902054670de0b6b3a76400009082020590930192905060019190910190610ff1565b836000038310156111595781838560000303101561116457828460000303905061115d565b5060005b9392505050565b508061115d565b600092505b60015483108015611182575060068410155b15610b8d5760008381526020819052604090206008015460ff16600114806111b557506040600090812084825260070154145b156111c05782935083505b60019290920191611170565b6000848152602081905260408120818155600181810180548482559293929091600290821615610100026000190190911604601f8190106113d557505b5050600060028281018290556003830182905560048301829055600583018054600160a060020a03191690556007830182905560088301805460ff19169055600a8301829055600b9092018190558581526020818152604082208e8155600190810180548f518286529484902091959281161561010002600019011691909104601f908101839004820193928f019083901061140757805160ff19168380011785555b506112b89291506113ef565b50506000848152602081905260409020600281018a905560038101899055600481018890556005018054600160a060020a031916871790555b600092505b845183101561143757600084815260208190526040902060070154600a9010156113c9575050604060008181206007810180546001810190915584835260069190910160205291902084518590849081101561000257906020019060200201518160000160005081905550806000600050600086815260200190815260200160002060005060060160005060008581526020019081526020016000206000506000820160005054816000016000505560028201600050548160020160005055600482016000505481600401600050559050505b600192909201916112f6565b601f01602090049060005260206000209081019061120991905b8082111561140357600081556001016113ef565b5090565b828001600101855582156112ac579182015b828111156112ac578251826000505591602001919060010190611419565b505050505050505050505050565b6114503360006103d9565b01131561165457600193505b8380156114695750600085115b15611569576000199250600091505b6000888152602081815260408083208a845260060190915290206004015482101561165e5760406000818120848252600301602052205486901180159061151257506000600060005060008a81526020019081526020016000206000506006016000506000898152602001908152602001600020600050600301600050600084815260200190815260200160002060005060010160005054115b80156115525750600083128061155257506000888152602081815260408083208a8452600601825280832086845260030190915280822054848352912054105b1561155d5781925082505b60019190910190611478565b60008511156116545750600087815260208181526040808320898452600601909152902060020154600590819010156116b5576000600050600089815260200190815260200160002060005060060160005060008881526020019081526020016000206000506002016000818150548092919060010191905055905080505b6005811015611654576040805160608101825287815260208181018881523383850190815260008d81528084528581208d8252600601845285812087825260019081019094529490942092518355519082015560020180549151600160a060020a031990921690911790555b5050505050505050565b600083121561167057600093506116b0565b6116ad8888888887600085815260208181526040808320878452600601825280832084845260030190915281206001015481906121f890856104be565b94505b61145c565b600091505b6000888152602081815260408083208a845260060190915290206002015482108015611708575060058110158061170857506040600081812083825260019081016020529181209091015414155b156115e8576000888152602081815260408083208a845260060182528083208584526001908101909252822001541415611743575080611830565b6000888152602081815260408083208a84526006018252808320858452600101909152902054869010801561182857506005811015806118285750600060005060008981526020019081526020016000206000506006016000506000888152602001908152602001600020600050600101600050600082815260200190815260200160002060005060000160005054600060005060008a81526020019081526020016000206000506006016000506000898152602001908152602001600020600050600101600050600084815260200190815260200160002060005060000160005054105b156118305750805b600191909101906116ba565b6118473360006103d9565b01131561165457600193505b8380156118605750600085115b15611960576000199250600091505b6000888152602081815260408083208a8452600601909152902060020154821015611a535760406000818120848252600101602052205486901080159061190957506000600060005060008a81526020019081526020016000206000506006016000506000898152602001908152602001600020600050600101600050600084815260200190815260200160002060005060010160005054115b80156119495750600083128061194957506000888152602081815260408083208a8452600601825280832086845260010190915280822054848352912054115b156119545781925082505b6001919091019061186f565b6000851115611654575060008781526020818152604080832089845260060190915290206004015460059081901015611aaa576000600050600089815260200190815260200160002060005060060160005060008881526020019081526020016000206000506004016000818150548092919060010191905055905080505b6005811015611654576040805160608101825296875260208781019687523388830190815260009a8b528a8252828b20998b526006999099018152818a20928a5260039290920190915290962093518455505051600182015560020180549151600160a060020a0319909216909117905550565b6000831215611a655760009350611aa5565b611aa288888888876000858152602081815260408083208784526006018252808320848452600190810190925282200154819061253090856104be565b94505b611853565b600091505b6000888152602081815260408083208a845260060190915290206004015482108015611afb5750600581101580611afb5750604060008181208382526003016020529081206001015414155b156119df576000888152602081815260408083208a845260060182528083208584526003019091528120600101541415611b36575080611c23565b6000888152602081815260408083208a845260060182528083208584526003019091529020548690118015611c1b5750600581101580611c1b5750600060005060008981526020019081526020016000206000506006016000506000888152602001908152602001600020600050600301600050600082815260200190815260200160002060005060000160005054600060005060008a81526020019081526020016000206000506006016000506000898152602001908152602001600020600050600301600050600084815260200190815260200160002060005060000160005054115b15611c235750805b60019190910190611aaf565b505050565b60019290920191610275565b5060005b600083815260208181526040808320858452600601909152902060040154811015611cf557604060008181208382526003016020522060020154600160a060020a03908116339091161415611ced5760006000600050600085815260200190815260200160002060005060060160005060008481526020019081526020016000206000506003016000506000838152602001908152602001600020600050600101600050819055505b600101611c44565b60019190910190610284565b50949b9a5050505050505050505050565b958301955b60019590950194610bc4565b506000858152602081815260408083208584526006019091529020545b611d4e8d8d8d8d8a86610431565b919091019083821280611d615750846000145b15611d70576001945090925082905b670de0b6b3a76400006000600050600088815260200190815260200160002060005060090160005060008f600160a060020a031681526020019081526020016000206000506001016000505405915081508b861415611dd957670de0b6b3a76400008905909101905b5060008581526020818152604080832085845260060190915281205481901215611ec8576000600050600087815260200190815260200160002060005060020160005054600060005060008881526020019081526020016000206000506006016000506000858152602001908152602001600020600050600001600050546000031115611ec35760006000506000878152602001908152602001600020600050600201600050546000600050600088815260200190815260200160002060005060060160005060008581526020019081526020016000206000506000016000505460000303905080505b611eef565b50600085815260208181526040808320600281015486855260069190910190925290912054015b611efd8d8d8d8d8a86610431565b919091019083821215611f105781935083505b60019290920191610c5b565b50979650505050505050565b600087815260208181526040808320600160a060020a038f16845260090182528083208684529091529020540205909101908785148015611f6857508681145b15611fb157600085815260208181526040808320848452600681018352908320548884529290915260020154670de0b6b3a764000091611fa9918790610a7d565b870205909101905b600101610436565b50805b92915050565b506003805460019081019182905560008281526002602090815260408083208054600160a060020a0319163390811782559401805434019055600160a060020a0393909316825260049052208190555b50565b81136120125733600160a060020a031660009081526004602090815260408083205483526002909152902060010180548290039055612052610270565b60405133600160a060020a031690600090839082818181858883f1505050505050565b506000611fbc565b61208e836000600060006000610bba565b600160a060020a03841660009081526004602090815260408083205483526002909152902060010154019050611fbc565b6120ca8460016103d9565b91509150915091565b820191906000526020600020905b8154815290600101906020018083116120e157829003601f168201915b5050505050945095509550955095509550955091939550919395565b50949a9399509197509550909350505050565b60001990910190610616565b50949993985091965094509092505050565b600019909101906108a8565b8a878151811015610002579060200190602002018a888151811015610002579060200190602002018a898151811015610002579060200190602002018a8a815181101561000257505060208a81028c0101939093529290915291905252600192830192016108dd565b60008781526020818152604080832089845260060182528083208684526003019091528120600101555b8391505b5095945050505050565b6000888152602081815260408083208a845260060182528083208784526003019091528120805460029190910154929350909161224b91600160a060020a0391909116908a908a90868603908702610bba565b6000898152602081815260408083208b8452600601825280832088845260030190915281206002015461228a91600160a060020a0391909116906103d9565b0113156121c05760008781526020818152604080832033600160a060020a031684526009019091528120600201549482900394610100900460ff16141561235057600160006000506000898152602001908152602001600020600050600901600050600033600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff0219169083021790555060006000506000888152602001908152602001600020600050600a016000818150548092919060010191905055505b6000878152602081815260408083208984526006810183528184208785526003018352818420600290810154600160a060020a0316855260099190910190925282200154610100900460ff16141561248a576001600060005060008981526020019081526020016000206000506009016000506000600060005060008b815260200190815260200160002060005060060160005060008a8152602001908152602001600020600050600301600050600087815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff0219169083021790555060006000506000888152602001908152602001600020600050600a016000818150548092919060010191905055505b60008781526020818152604080832033600160a060020a039081168552600982018085528386208c875280865284872080548901905560069390930185528386208987526003018552838620805460019485018054918a02909103905580840180548990039055600281018054841688528287528588208e8952875285882080548a900390559054905490921686529093529220909101805491830290910190556121ea565b6000888152602081815260408083208a845260060182528083208784526001019091528120805460029190910154929350909161258391600160a060020a0391909116908a908a90869081028603610bba565b6000898152602081815260408083208b845260060182528083208884526001019091528120600201546125c291600160a060020a0391909116906103d9565b0113156128675760008781526020818152604080832033600160a060020a031684526009019091528120600201549482900394610100900460ff16141561268857600160006000506000898152602001908152602001600020600050600901600050600033600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff0219169083021790555060006000506000888152602001908152602001600020600050600a016000818150548092919060010191905055505b6000878152602081815260408083208984526006810183528184208785526001018352818420600290810154600160a060020a0316855260099190910190925282200154610100900460ff1614156127c2576001600060005060008981526020019081526020016000206000506009016000506000600060005060008b815260200190815260200160002060005060060160005060008a8152602001908152602001600020600050600101600050600087815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff0219169083021790555060006000506000888152602001908152602001600020600050600a016000818150548092919060010191905055505b60008781526020818152604080832033600160a060020a039081168552600982018085528386208c87528086528487208054899003905560069390930185528386208987526001908101865284872080549482018054958a0290950190945583810180548990039055600284018054841688528287528588208e8952875285882080548a019055935493549092168652909352922001805491830290910390556121ea565b60008781526020818152604080832089845260060182528083208684526001908101909252822001558391506121ee565b5090945092506000196000805b60008d8152602081815260408083208f8452600601909152902060040154811015612a0a576040600081812083825260030160205290812060010154118015612941575082600060005060008f815260200190815260200160002060005060060160005060008e815260200190815260200160002060005060030160005060008381526020019081526020016000206000506000016000505411155b15612a025760008d8152602081815260408083208f84526006018252808320848452600301909152902054839010156129d357600091508150600060005060008e815260200190815260200160002060005060060160005060008d8152602001908152602001600020600050600301600050600082815260200190815260200160002060005060000160005054925082505b60008d8152602081815260408083208f8452600601825280832084845260030190915290206001015491909101905b6001016128a5565b50949b939a5098509296509094505050505056","info":{"source":"contract Market {\n\n  struct Order {\n    uint price;\n    uint size;\n    address user;\n  }\n  struct Option {\n    int strike;\n    mapping(uint => Order) buyOrders;\n    uint numBuyOrders;\n    mapping(uint => Order) sellOrders;\n    uint numSellOrders;\n  }\n  struct Position {\n    mapping(uint => int) positions;\n    int cash;\n    bool expired;\n    bool hasPosition;\n  }\n  struct OptionChain {\n    uint expiration;\n    string underlying;\n    uint margin;\n    uint realityID;\n    bytes32 factHash;\n    address ethAddr;\n    mapping(uint => Option) options;\n    uint numOptions;\n    bool expired;\n    mapping(address => Position) positions;\n    uint numPositions;\n    uint numPositionsExpired;\n  }\n  mapping(uint => OptionChain) optionChains;\n  uint numOptionChains;\n  struct Account {\n    address user;\n    int capital;\n  }\n  mapping(uint => Account) accounts;\n  uint numAccounts;\n  mapping(address => uint) accountIDs; //starts at 1\n\n  function Market() {\n  }\n\n  function addFunds() {\n    if (accountIDs[msg.sender]>0) {\n      accounts[accountIDs[msg.sender]].capital += int(msg.value);\n    } else {\n      uint accountID = ++numAccounts;\n      accounts[accountID].user = msg.sender;\n      accounts[accountID].capital += int(msg.value);\n      accountIDs[msg.sender] = accountID;\n    }\n  }\n\n  function withdrawFunds(uint amount) {\n    if (accountIDs[msg.sender]>0) {\n      if (int(amount)<=getFunds(msg.sender, true)) {\n        accounts[accountIDs[msg.sender]].capital -= int(amount);\n        cancelOrders();\n        msg.sender.send(amount);\n      }\n    }\n  }\n\n  function getFunds(address user, bool onlyAvailable) constant returns(int) {\n    if (accountIDs[user]>0) {\n      if (onlyAvailable == false) {\n        return accounts[accountIDs[user]].capital;\n      } else {\n        return accounts[accountIDs[user]].capital + getMaxLossAfterTrade(user, 0, 0, 0, 0);\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  function getFundsAndAvailable(address user) constant returns(int, int) {\n    return (getFunds(user, false), getFunds(user, true));\n  }\n\n  function getOptionChain(uint optionChainID) constant returns (uint, string, uint, uint, bytes32, address) {\n    return (optionChains[optionChainID].expiration, optionChains[optionChainID].underlying, optionChains[optionChainID].margin, optionChains[optionChainID].realityID, optionChains[optionChainID].factHash, optionChains[optionChainID].ethAddr);\n  }\n\n  function getMarket(address user) constant returns(uint[], int[], int[], int[]) {\n    uint[] memory optionIDs = new uint[](60);\n    int[] memory strikes = new int[](60);\n    int[] memory positions = new int[](60);\n    int[] memory cashes = new int[](60);\n    uint z = 0;\n    for (int optionChainID=int(numOptionChains)-1; optionChainID>=0 && z<60; optionChainID--) {\n      if (optionChains[uint(optionChainID)].expired == false) {\n        for (uint optionID=0; optionID<optionChains[uint(optionChainID)].numOptions; optionID++) {\n          optionIDs[z] = uint(optionChainID)*1000 + optionID;\n          strikes[z] = optionChains[uint(optionChainID)].options[optionID].strike;\n          positions[z] = optionChains[uint(optionChainID)].positions[user].positions[optionID];\n          cashes[z] = optionChains[uint(optionChainID)].positions[user].cash;\n          z++;\n        }\n      }\n    }\n    return (optionIDs, strikes, positions, cashes);\n  }\n\n  function getMarketTopLevels() constant returns(uint[], uint[], uint[], uint[]) {\n    uint[] memory buyPrices = new uint[](60);\n    uint[] memory buySizes = new uint[](60);\n    uint[] memory sellPrices = new uint[](60);\n    uint[] memory sellSizes = new uint[](60);\n    uint z = 0;\n    for (int optionChainID=int(numOptionChains)-1; optionChainID>=0 && z<60; optionChainID--) {\n      if (optionChains[uint(optionChainID)].expired == false) {\n        for (uint optionID=0; optionID<optionChains[uint(optionChainID)].numOptions; optionID++) {\n          (buyPrices[z], buySizes[z], sellPrices[z], sellSizes[z]) = getTopLevel(uint(optionChainID), optionID);\n          z++;\n        }\n      }\n    }\n    return (buyPrices, buySizes, sellPrices, sellSizes);\n  }\n\n  function expire(uint accountID, uint optionChainID, uint8 v, bytes32 r, bytes32 s, bytes32 value) {\n    if (optionChains[optionChainID].expired == false) {\n      if (ecrecover(sha3(optionChains[optionChainID].factHash, value), v, r, s) == optionChains[optionChainID].ethAddr) {\n        uint lastAccount = numAccounts;\n        if (accountID==0) {\n          accountID = 1;\n        } else {\n          lastAccount = accountID;\n        }\n        for (accountID=accountID; accountID<=lastAccount; accountID++) {\n          if (optionChains[optionChainID].positions[accounts[accountID].user].expired == false) {\n            int result = optionChains[optionChainID].positions[accounts[accountID].user].cash / 1000000000000000000;\n            for (uint optionID=0; optionID<optionChains[optionChainID].numOptions; optionID++) {\n              int moneyness = getMoneyness(optionChains[optionChainID].options[optionID].strike, uint(value), optionChains[optionChainID].margin);\n              result += moneyness * optionChains[optionChainID].positions[accounts[accountID].user].positions[optionID] / 1000000000000000000;\n            }\n            accounts[accountID].capital = accounts[accountID].capital + result;\n            optionChains[optionChainID].positions[accounts[accountID].user].expired = true;\n            optionChains[optionChainID].numPositionsExpired++;\n          }\n        }\n        if (optionChains[optionChainID].numPositionsExpired == optionChains[optionChainID].numPositions) {\n          optionChains[optionChainID].expired = true;\n        }\n      }\n    }\n  }\n\n  function getMoneyness(int strike, uint settlement, uint margin) constant returns(int) {\n    if (strike>=0) { //call\n      if (settlement>uint(strike)) {\n        if (settlement-uint(strike)<margin) {\n          return int(settlement-uint(strike));\n        } else {\n          return int(margin);\n        }\n      } else {\n        return 0;\n      }\n    } else { //put\n      if (settlement<uint(-strike)) {\n        if (uint(-strike)-settlement<margin) {\n          return int(uint(-strike)-settlement);\n        } else {\n          return int(margin);\n        }\n      } else {\n        return 0;\n      }\n    }\n  }\n\n  function addOptionChain(uint existingOptionChainID, uint expiration, string underlying, uint margin, uint realityID, bytes32 factHash, address ethAddr, int[] strikes) {\n    uint optionChainID = 6;\n    if (numOptionChains<6) {\n      optionChainID = numOptionChains++;\n    } else {\n      for (uint i=0; i < numOptionChains && optionChainID>=6; i++) {\n        if (optionChains[i].expired==true || optionChains[i].numOptions==0) {\n          optionChainID = i;\n        }\n      }\n    }\n    if (optionChainID<6) {\n      if (existingOptionChainID<6) {\n        optionChainID = existingOptionChainID;\n      } else {\n        delete optionChains[optionChainID];\n        optionChains[optionChainID].expiration = expiration;\n        optionChains[optionChainID].underlying = underlying;\n        optionChains[optionChainID].margin = margin;\n        optionChains[optionChainID].realityID = realityID;\n        optionChains[optionChainID].factHash = factHash;\n        optionChains[optionChainID].ethAddr = ethAddr;\n      }\n      for (i=0; i < strikes.length; i++) {\n        if (optionChains[optionChainID].numOptions<10) {\n          uint optionID = optionChains[optionChainID].numOptions++;\n          Option option = optionChains[optionChainID].options[i];\n          option.strike = strikes[i];\n          optionChains[optionChainID].options[i] = option;\n        }\n      }\n    }\n  }\n\n  function placeBuyOrder(uint optionChainID, uint optionID, uint price, uint size) {\n    if (getFunds(msg.sender, false)+getMaxLossAfterTrade(msg.sender, optionChainID, optionID, int(size), -int(size * price))>0) {\n      bool foundMatch = true;\n      while (foundMatch && size>0) {\n        int bestPriceID = -1;\n        for (uint i=0; i<optionChains[optionChainID].options[optionID].numSellOrders; i++) {\n          if (optionChains[optionChainID].options[optionID].sellOrders[i].price<=price && optionChains[optionChainID].options[optionID].sellOrders[i].size>0 && (bestPriceID<0 || optionChains[optionChainID].options[optionID].sellOrders[i].price<optionChains[optionChainID].options[optionID].sellOrders[uint(bestPriceID)].price)) {\n            bestPriceID = int(i);\n          }\n        }\n        if (bestPriceID<0) {\n          foundMatch = false;\n        } else {\n          size = orderMatchBuy(optionChainID, optionID, price, size, uint(bestPriceID));\n        }\n      }\n      if (size>0) {\n        uint orderID = 5;\n        if (optionChains[optionChainID].options[optionID].numBuyOrders < 5) {\n          orderID = optionChains[optionChainID].options[optionID].numBuyOrders++;\n        } else {\n          for (i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders && (orderID>=5 || optionChains[optionChainID].options[optionID].buyOrders[orderID].size!=0); i++) {\n            if (optionChains[optionChainID].options[optionID].buyOrders[i].size==0) {\n              orderID = i;\n            } else if (optionChains[optionChainID].options[optionID].buyOrders[i].price<price && (orderID>=5 || (optionChains[optionChainID].options[optionID].buyOrders[i].price<optionChains[optionChainID].options[optionID].buyOrders[orderID].price))) {\n              orderID = i;\n            }\n          }\n        }\n        if (orderID<5) {\n          optionChains[optionChainID].options[optionID].buyOrders[orderID] = Order(price, size, msg.sender);\n        }\n      }\n    }\n  }\n\n  function placeSellOrder(uint optionChainID, uint optionID, uint price, uint size) {\n    if (getFunds(msg.sender, false)+getMaxLossAfterTrade(msg.sender, optionChainID, optionID, -int(size), int(size * price))>0) {\n      bool foundMatch = true;\n      while (foundMatch && size>0) {\n        int bestPriceID = -1;\n        for (uint i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders; i++) {\n          if (optionChains[optionChainID].options[optionID].buyOrders[i].price>=price && optionChains[optionChainID].options[optionID].buyOrders[i].size>0 && (bestPriceID<0 || optionChains[optionChainID].options[optionID].buyOrders[i].price>optionChains[optionChainID].options[optionID].buyOrders[uint(bestPriceID)].price)) {\n            bestPriceID = int(i);\n          }\n        }\n        if (bestPriceID<0) {\n          foundMatch = false;\n        } else {\n          size = orderMatchSell(optionChainID, optionID, price, size, uint(bestPriceID));\n        }\n      }\n      if (size>0) {\n        uint orderID = 5;\n        if (optionChains[optionChainID].options[optionID].numSellOrders < 5) {\n          orderID = optionChains[optionChainID].options[optionID].numSellOrders++;\n        } else {\n          for (i=0; i<optionChains[optionChainID].options[optionID].numSellOrders && (orderID>=5 || optionChains[optionChainID].options[optionID].sellOrders[orderID].size!=0); i++) {\n            if (optionChains[optionChainID].options[optionID].sellOrders[i].size==0) {\n              orderID = i;\n            } else if (optionChains[optionChainID].options[optionID].sellOrders[i].price>price && (orderID>=5 || (optionChains[optionChainID].options[optionID].sellOrders[i].price>optionChains[optionChainID].options[optionID].sellOrders[orderID].price))) {\n              orderID = i;\n            }\n          }\n        }\n        if (orderID<5) {\n          optionChains[optionChainID].options[optionID].sellOrders[orderID] = Order(price, size, msg.sender);\n        }\n      }\n    }\n  }\n\n  function orderMatchBuy(uint optionChainID, uint optionID, uint price, uint size, uint bestPriceID) private returns(uint) {\n    uint sizeChange = min(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size, size);\n    if (getFunds(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user, false)+getMaxLossAfterTrade(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user, optionChainID, optionID, -int(sizeChange), int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price))>0) {\n      size -= sizeChange;\n      if (optionChains[optionChainID].positions[msg.sender].hasPosition == false) {\n        optionChains[optionChainID].positions[msg.sender].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      if (optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].hasPosition == false) {\n        optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      optionChains[optionChainID].positions[msg.sender].positions[optionID] += int(sizeChange);\n      optionChains[optionChainID].positions[msg.sender].cash -= int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price);\n      optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size -= sizeChange;\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].positions[optionID] -= int(sizeChange);\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].cash += int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price);\n    } else {\n      optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size = 0;\n    }\n    return size;\n  }\n\n  function orderMatchSell(uint optionChainID, uint optionID, uint price, uint size, uint bestPriceID) private returns(uint) {\n    uint sizeChange = min(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size, size);\n    if (getFunds(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user, false)+getMaxLossAfterTrade(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user, optionChainID, optionID, int(sizeChange), -int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price))>0) {\n      size -= sizeChange;\n      if (optionChains[optionChainID].positions[msg.sender].hasPosition == false) {\n        optionChains[optionChainID].positions[msg.sender].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      if (optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].hasPosition == false) {\n        optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      optionChains[optionChainID].positions[msg.sender].positions[optionID] -= int(sizeChange);\n      optionChains[optionChainID].positions[msg.sender].cash += int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price);\n      optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size -= sizeChange;\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].positions[optionID] += int(sizeChange);\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].cash -= int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price);\n    } else {\n      optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size = 0;\n    }\n    return size;\n  }\n\n  function getTopLevel(uint optionChainID, uint optionID) private constant returns(uint, uint, uint, uint) {\n    uint buyPrice = 0;\n    uint buySize = 0;\n    uint sellPrice = 0;\n    uint sellSize = 0;\n    uint watermark = 0;\n    uint size = 0;\n    for (uint i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders; i++) {\n      if (optionChains[optionChainID].options[optionID].buyOrders[i].size>0 && optionChains[optionChainID].options[optionID].buyOrders[i].price>=watermark) {\n        if (optionChains[optionChainID].options[optionID].buyOrders[i].price>watermark) {\n          size = 0;\n          watermark = optionChains[optionChainID].options[optionID].buyOrders[i].price;\n        }\n        size += optionChains[optionChainID].options[optionID].buyOrders[i].size;\n      }\n    }\n    buyPrice = watermark;\n    buySize = size;\n    watermark = uint(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n    size = 0;\n    for (i=0; i<optionChains[optionChainID].options[optionID].numSellOrders; i++) {\n      if (optionChains[optionChainID].options[optionID].sellOrders[i].size>0 && optionChains[optionChainID].options[optionID].sellOrders[i].price<=watermark) {\n        if (optionChains[optionChainID].options[optionID].sellOrders[i].price<watermark) {\n          size = 0;\n          watermark = optionChains[optionChainID].options[optionID].sellOrders[i].price;\n        }\n        size += optionChains[optionChainID].options[optionID].sellOrders[i].size;\n      }\n    }\n    sellPrice = watermark;\n    sellSize = size;\n    return (buyPrice, buySize, sellPrice, sellSize);\n  }\n\n  function cancelOrders() {\n    for (uint optionChainID=0; optionChainID<numOptionChains; optionChainID++) {\n      for (uint i=0; i<optionChains[optionChainID].numOptions; i++) {\n        for (uint j=0; j<optionChains[optionChainID].options[i].numBuyOrders; j++) {\n          if (optionChains[optionChainID].options[i].buyOrders[j].user==msg.sender) {\n            optionChains[optionChainID].options[i].buyOrders[j].size = 0;\n          }\n        }\n        for (j=0; j<optionChains[optionChainID].options[i].numSellOrders; j++) {\n          if (optionChains[optionChainID].options[i].sellOrders[j].user==msg.sender) {\n            optionChains[optionChainID].options[i].sellOrders[j].size = 0;\n          }\n        }\n      }\n    }\n  }\n\n  function getMaxLossAfterTrade(address user, uint optionChainID, uint optionID, int positionChange, int cashChange) constant returns(int) {\n    int totalMaxLoss = 0;\n    for (uint i=0; i<numOptionChains; i++) {\n      if (optionChains[i].positions[user].expired == false && optionChains[i].numOptions>0) {\n        bool maxLossInitialized = false;\n        int maxLoss = 0;\n        for (uint s=0; s<optionChains[i].numOptions; s++) {\n          int pnl = optionChains[i].positions[user].cash / 1000000000000000000;\n          if (i==optionChainID) {\n            pnl += cashChange / 1000000000000000000;\n          }\n          uint settlement = 0;\n          if (optionChains[i].options[s].strike<0) {\n            settlement = uint(-optionChains[i].options[s].strike);\n          } else {\n            settlement = uint(optionChains[i].options[s].strike);\n          }\n          pnl += moneySumAtSettlement(user, optionChainID, optionID, positionChange, i, settlement);\n          if (pnl<maxLoss || maxLossInitialized==false) {\n            maxLossInitialized = true;\n            maxLoss = pnl;\n          }\n          pnl = optionChains[i].positions[user].cash / 1000000000000000000;\n          if (i==optionChainID) {\n            pnl += cashChange / 1000000000000000000;\n          }\n          settlement = 0;\n          if (optionChains[i].options[s].strike<0) {\n            if (uint(-optionChains[i].options[s].strike)>optionChains[i].margin) {\n              settlement = uint(-optionChains[i].options[s].strike)-optionChains[i].margin;\n            }\n          } else {\n            settlement = uint(optionChains[i].options[s].strike)+optionChains[i].margin;\n          }\n          pnl += moneySumAtSettlement(user, optionChainID, optionID, positionChange, i, settlement);\n          if (pnl<maxLoss) {\n            maxLoss = pnl;\n          }\n        }\n        totalMaxLoss += maxLoss;\n      }\n    }\n    return totalMaxLoss;\n  }\n\n  function moneySumAtSettlement(address user, uint optionChainID, uint optionID, int positionChange, uint i, uint settlement) constant returns(int) {\n    int pnl = 0;\n    for (uint j=0; j<optionChains[i].numOptions; j++) {\n      pnl += optionChains[i].positions[user].positions[j] * getMoneyness(optionChains[i].options[j].strike, settlement, optionChains[i].margin) / 1000000000000000000;\n      if (i==optionChainID && j==optionID) {\n        pnl += positionChange * getMoneyness(optionChains[i].options[j].strike, settlement, optionChains[i].margin) / 1000000000000000000;\n      }\n    }\n    return pnl;\n  }\n\n  function min(uint a, uint b) constant returns(uint) {\n    if (a<b) {\n      return a;\n    } else {\n      return b;\n    }\n  }\n}\n","language":"Solidity","languageVersion":"0.2.0","compilerVersion":"0.2.0","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /var/folders/sj/bz257rsj0w1g7cpjjycd7wpw0000gn/T/solc848504718","abiDefinition":[{"constant":false,"inputs":[{"name":"accountID","type":"uint256"},{"name":"optionChainID","type":"uint256"},{"name":"v","type":"uint8"},{"name":"r","type":"bytes32"},{"name":"s","type":"bytes32"},{"name":"value","type":"bytes32"}],"name":"expire","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"withdrawFunds","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"}],"name":"getOptionChain","outputs":[{"name":"","type":"uint256"},{"name":"","type":"string"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"bytes32"},{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[],"name":"cancelOrders","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"},{"name":"onlyAvailable","type":"bool"}],"name":"getFunds","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"},{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"positionChange","type":"int256"},{"name":"i","type":"uint256"},{"name":"settlement","type":"uint256"}],"name":"moneySumAtSettlement","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"price","type":"uint256"},{"name":"size","type":"uint256"}],"name":"placeSellOrder","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"min","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"addFunds","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getMarket","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"int256[]"},{"name":"","type":"int256[]"},{"name":"","type":"int256[]"}],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getFundsAndAvailable","outputs":[{"name":"","type":"int256"},{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[],"name":"getMarketTopLevels","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"}],"type":"function"},{"constant":true,"inputs":[{"name":"strike","type":"int256"},{"name":"settlement","type":"uint256"},{"name":"margin","type":"uint256"}],"name":"getMoneyness","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"price","type":"uint256"},{"name":"size","type":"uint256"}],"name":"placeBuyOrder","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"existingOptionChainID","type":"uint256"},{"name":"expiration","type":"uint256"},{"name":"underlying","type":"string"},{"name":"margin","type":"uint256"},{"name":"realityID","type":"uint256"},{"name":"factHash","type":"bytes32"},{"name":"ethAddr","type":"address"},{"name":"strikes","type":"int256[]"}],"name":"addOptionChain","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"},{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"positionChange","type":"int256"},{"name":"cashChange","type":"int256"}],"name":"getMaxLossAfterTrade","outputs":[{"name":"","type":"int256"}],"type":"function"},{"inputs":[],"type":"constructor"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}}}