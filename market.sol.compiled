{"Market":{"code":"0x606060405260008054600160a060020a0319167318e79a47d8a58bef5aaecbba85ea1420649c64a8178155612ba690819061003990396000f3606060405236156100b95760e060020a6000350463155dd5ee81146100bb578063177766e6146100eb5780633597e6361461016b578063460c1a7a146103e95780635c665f891461053257806372e18c121461057e5780637ae2b5c7146105bf5780638f283970146105da578063a26759cb1461060d578063b013247a1461064e578063d4dfadbf146107de578063d5544f9414610af5578063e54aae1314610b0a578063eddb00d414610dfe578063fe4667e914610e3f575b005b6100b960043533600160a060020a0316600090815260056020526040812054111561127c5761121e33600161053c565b610f4d60043560408051602081810183526000808352848152600180835284822085518154918301805460029481161561010002600019011693909304601f81018690048602820186019097528681529295909391929183919083018282801561130b5780601f106112e05761010080835404028352916020019161130b565b60408051604435600481810135602081810280860182019096528185526100b9958335956024803596606495929491019282918501908490808284375050604080519635808901356020818102808b018201909452818a52979998608498909750602492909201955093508392508501908490808284375050604080519635808901356020818102808b018201909452818a5297999860a498909750602492909201955093508392508501908490808284375050604080519635808901356020818102808b018201909452818a5297999860c4989097506024929092019550935083925085019084908082843750505060008a8152600160208190526040822090970154949695509384935083925082915060ff16811415611549575b60008a8152600160205260409020600301548410156113c65760406000818120868252600201602052206001908101548751889087908110156100025790602001906020020151604051808381526020018281526020019250505060405180910390208a86815181101561000257906020019060200201518a87815181101561000257906020019060200201518a8881518110156100025790602001906020020151604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051808303816000866161da5a03f115610002575050604051805190602001509250600160005060008b8152602001908152602001600020600050600201600050600085815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031683600160a060020a03161415156103dd57600094505b60019390930192610288565b6100b95b600080805b6002548310156121b757600091505b60016000506000848152602001908152602001600020600050600301600050548210156121bc575060005b60008381526001602090815260408083208584526002019091529020600501548110156121c85733600160a060020a0316600160005060008581526020019081526020016000206000506002016000506000848152602001908152602001600020600050600401600050600083815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a0316141561052a5760006001600050600085815260200190815260200160002060005060020160005060008481526020019081526020016000206000506004016000506000838152602001908152602001600020600050600101600050819055505b60010161042c565b610fc26004356024355b600160a060020a0382166000908152600560205260408120548190111561127f5781600014156112895760408082205482526003602052902060010154611283565b6100b96004356024356044356064356000808080612710850681146105a7576127108506909403935b6000611d44338a8a896000036127108c8c0204610e52565b610fc26004356024355b6000818310156121b0575081611283565b6100b9600435600054600160a060020a0390811633909116141561127c5760008054600160a060020a0319168217905550565b6100b933600160a060020a0316600090815260056020526040812054819011156121415760408082205482526003602052812060010180543401905561127c565b604080516020604435600481810135601f81018490048402850184019095528484526100b994813594602480359593946064949293910191819084018382808284375050604080519635808901356020818102808b018201909452818a52979998608498909750602492909201955093508392508501908490808284375050604080519635808901356020818102808b018201909452818a5297999860a498909750602492909201955093508392508501908490808284375050604080519635808901356020818102808b018201909452818a5297999860c498909750602492909201955093508392508501908490808284375050604080519635808901356020818102808b018201909452818a5297999860e4989097506024929092019550935083925085019084908082843750949650505050505050600080548190819081908190600160a060020a039081163390911614156118c95760025460069550859010156115bf57600280546001810190915594505b60068510156118c95760068c1015611621578b9450611681565b610fd460043560408051602081810183526000808352835180830185528181528451808401865282815285518085018752838152865180860188528481528751808701895285815288518088018a5286815289518089018b528781528a51808a018c528881528b51998a018c52888a529a51999a9699959894979396929591949093909181908190601e908059106108735750595b90808252806020026020018201604052509750601e6040518059106108955750595b90808252806020026020018201604052509650601e6040518059106108b75750595b90808252806020026020018201604052509550601e6040518059106108d95750595b90808252806020026020018201604052509450601e6040518059106108fb5750595b81815260209182028101909101604052600254909450600093506000190191505b6000821215801561092d5750601e83105b1561131b5760008281526001602052604081206004015460ff161415611331575060005b6000828152600160205260409020600301548110156113315780826103e8020188848151811015610002576040600081812060208481029095018501959095528581526002949094019092529120600301548851909189918110156100025790602001906020020190908181526020015050600160005060008381526020019081526020016000206000506002016000506000828152602001908152602001600020600050600001600050548684815181101561000257906020019060200201909081815260200150506001600050600083815260200190815260200160002060005060050160005060008f600160a060020a031681526020019081526020016000206000506000016000506000828152602001908152602001600020600050548584815181101561000257906020019060200201909081815260200150506001600050600083815260200190815260200160002060005060050160005060008f600160a060020a03168152602001908152602001600020600050600101600050548484815181101561000257505060208481028601015260019283019201610951565b61110a600435600060006112d583600061053c565b60408051602081810183526000808352835180830185528181528451808401865282815285518085018752838152865180860188528481528751808701895285815288518088018a5286815289519788018a52868852985161112399959794969395929491939081908190601e90805910610b825750595b90808252806020026020018201604052509650601e604051805910610ba45750595b90808252806020026020018201604052509550601e604051805910610bc65750595b90808252806020026020018201604052509450601e604051805910610be85750595b81815260209182028101909101604052600254909450600093506000190191505b60008212158015610c1a5750601e83105b1561133e5760008281526001602052604081206004015460ff161415611350575060005b6000828152600160205260409020600301548110156113505761135d82826000808080808080808080805b60008d81526001602090815260408083208f84526002019091529020600501548110156129f0576040600081812083825260040160205290812060010154118015610d07575082600160005060008f815260200190815260200160002060005060020160005060008e815260200190815260200160002060005060040160005060008381526020019081526020016000206000506000016000505410155b15610df65760008d81526001602090815260408083208f8452600201825280832084845260040190915290205483901115610d9b57600091508150600160005060008e815260200190815260200160002060005060020160005060008d8152602001908152602001600020600050600401600050600082815260200190815260200160002060005060000160005054925082505b600160005060008e815260200190815260200160002060005060020160005060008d81526020019081526020016000206000506004016000506000828152602001908152602001600020600050600101600050548201915081505b600101610c69565b6100b9600435602435604435606435600080808061271085068114610e27576127108506909403935b60006118d7338a8a896127108c8c0204600003610e52565b610fc26004356024356044356064356084355b600080808080805b600254841015612190576040600090812085825260016020526004015460ff1614156121a457600092506001600050600085815260200190815260200160002060005060050160005060008c600160a060020a0316815260200190815260200160002060005060010160005054915089841415610ed657908601905b5090508060005b60008481526001602052604090206003015481101561219f5760406000818120600160a060020a038e168252600501602090815282822084835290522054909101908984148015610f2d57508881145b15610f3757908701905b82821215610f455781925082505b600101610edd565b60405180838152602001806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f168015610fb35780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b60408051918252519081900360200190f35b60405180806020018060200180602001806020018060200186810386528b8181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f15090500186810385528a8181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018681038452898181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018681038352888181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018681038252878181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019a505050505050505050505060405180910390f35b6040805192835260208301919091528051918290030190f35b60405180806020018060200180602001806020018581038552898181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038452888181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038352878181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050018581038252868181518152602001915080519060200190602002808383829060006004602084601f0104600f02600301f1509050019850505050505050505060405180910390f35b811361127c5733600160a060020a03166000908152600560209081526040808320548352600390915290206001018054829003905561125b6103ed565b60405133600160a060020a031690600090839082818181858883f150505050505b50565b5060005b92915050565b61129a836000600060006000610e52565b600160a060020a03841660009081526005602090815260408083205483526003909152902060010154019050611283565b915091505b915091565b6112cb84600161053c565b820191906000526020600020905b8154815290600101906020018083116112ee57829003601f168201915b50505050509050915091506112d0565b50959c949b509299509097509550909350505050565b600019919091019061091c565b50949993985091965094509092505050565b6000199190910190610c09565b8a878151811015610002579060200190602002018a888151811015610002579060200190602002018a898151811015610002579060200190602002018a8a815181101561000257505060208a81028c010193909352929091529190525260019283019201610c3e565b841561154957600454915060008b14156113e35760019a506113e7565b8a91505b818b116115155760008a81526001602090815260408083208e84526003835281842054600160a060020a0316845260050190915281206002015460ff1614156115b357600160005060008b81526020019081526020016000206000506005016000506000600360005060008e815260200190815260200160002060005060000160009054906101000a9004600160a060020a0316600160a060020a031681526020019081526020016000206000506001016000505490506000935083505b60008a81526001602052604090206003015484101561155657604060008181208d82526003602090815283832054600160a060020a0316835260059190910181528282208783529052205486518790869081101561000257602090810290910101510201600193909301926114a5565b60008a81526001602052604090206006810154600791909101541415611549576040600020600401805460ff191660011790555b5050505050505050505050565b60008b815260036020908152604080832060018181018054870190558e85528084528285209154600160a060020a03168552600582018452918420600201805460ff191683179055928d9052908190526007909101805490910190555b60019a909a01996113e7565b600093505b600254841080156115d6575060068510155b156107c45760008481526001602081905260409091206004015460ff16148061160a57506040600090812085825260030154145b156116155783945084505b600193909301926115c4565b600085815260016020819052604082208281558082018054848255919392909160029181161561010002600019011604601f8190106116e857505b505060006003820181905560048201805460ff19169055600682018190556007909101555b600085815260016020818152604083208e81558d518184018054818752958490209298509460029481161561010002600019011693909304601f908101839004820193928f019083901061171a57805160ff19168380011785555b5061174a929150611702565b601f01602090049060005260206000209081019061165c91905b808211156117165760008155600101611702565b5090565b828001600101855582156116dc579182015b828111156116dc57825182600050559160200191906001019061172c565b5060009450505b87518410156118c957600383015460059010156118bd5750506003810180546001810190915560008381526002830160205260409020885189908590811015610002576020908102909101015181558751889085908110156100025790602001906020020151816003016000508190555086848151811015610002579060200190602002015181600101600050819055508584815181101561000257906020019060200201518160020160006101000a815481600160a060020a03021916908302179055508083600201600050600086815260200190815260200160002060005060008201600050548160000160005055600182016000505481600101600050556002820160009054906101000a9004600160a060020a03168160020160006101000a815481600160a060020a03021916908302179055506003820160005054816003016000505560058201600050548160050160005055600782016000505481600701600050559050505b60019390930192611751565b505050505050505050505050565b6118e233600061053c565b011315611b6657600193505b8380156118fb5750600085115b15611a78576000199250600091505b60008881526001602090815260408083208a8452600201909152902060070154821015611b70576040600081812084825260060160205220548690118015906119a657506000600160005060008a81526020019081526020016000206000506002016000506000898152602001908152602001600020600050600601600050600084815260200190815260200160002060005060010160005054115b8015611a6157506000831280611a615750600160005060008981526020019081526020016000206000506002016000506000888152602001908152602001600020600050600601600050600084815260200190815260200160002060005060000160005054600160005060008a81526020019081526020016000206000506002016000506000898152602001908152602001600020600050600601600050600084815260200190815260200160002060005060000160005054105b15611a6c5781925082505b6001919091019061190a565b6000851115611b6657506000878152600160209081526040808320898452600201909152902060059081015481901015611bbb576001600050600089815260200190815260200160002060005060020160005060008881526020019081526020016000206000506005016000818150548092919060010191905055905080505b6005811015611b66576040805160608101825287815260208181018881523383850190815260008d815260018085528682208e83526002908101865287832089845260040190955295902093518455905193830193909355915191018054600160a060020a03191690911790555b5050505050505050565b6000831215611b825760009350611bb6565b6040600081812085825260060160205290812060010154611bb3918a918a918a918a918991819061233090856105c9565b94505b6118ee565b600091505b60008881526001602090815260408083208a845260020190915290206005015482108015611c0e5750600581101580611c0e5750604060008181208382526004016020529081206001015414155b15611af85760008881526001602081815260408084208b85526002018252808420868552600401909152822001541415611c49575080611d38565b60008881526001602090815260408083208a845260020182528083208584526004019091529020548690108015611d305750600581101580611d305750600160005060008981526020019081526020016000206000506002016000506000888152602001908152602001600020600050600401600050600082815260200190815260200160002060005060000160005054600160005060008a81526020019081526020016000206000506002016000506000898152602001908152602001600020600050600401600050600084815260200190815260200160002060005060000160005054105b15611d385750805b60019190910190611bc0565b611d4f33600061053c565b011315611b6657600193505b838015611d685750600085115b15611e6c576000199250600091505b60008881526001602090815260408083208a8452600201909152902060050154821015611f6157604060008181208482526004016020522054869010801590611e1357506000600160005060008a81526020019081526020016000206000506002016000506000898152602001908152602001600020600050600401600050600084815260200190815260200160002060005060010160005054115b8015611e5557506000831280611e55575060008881526001602090815260408083208a8452600201825280832086845260040190915280822054848352912054115b15611e605781925082505b60019190910190611d77565b6000851115611b665750600087815260016020908152604080832089845260020190915290206007015460059081901015611fb8576001600050600089815260200190815260200160002060005060020160005060008881526020019081526020016000206000506007016000818150548092919060010191905055905080505b6005811015611b66576040805160608101825296875260208781019687523388830190815260009a8b526001808352838c209a8c5260029a8b018352838c20948c5260069094019091529820955186559351938501939093555050500180549151600160a060020a03199092169091179055565b6000831215611f735760009350611fb3565b611fb088888888876000858152600160208181526040808420888552600201825280842085855260040190915282200154819061267890856105c9565b94505b611d5b565b600091505b60008881526001602090815260408083208a84526002019091529020600701548210801561200b575060058110158061200b5750604060008181208382526006016020529081206001015414155b15611eed5760008881526001602081815260408084208b85526002018252808420868552600601909152822001541415612046575080612135565b60008881526001602090815260408083208a84526002018252808320858452600601909152902054869011801561212d575060058110158061212d5750600160005060008981526020019081526020016000206000506002016000506000888152602001908152602001600020600050600601600050600082815260200190815260200160002060005060000160005054600160005060008a81526020019081526020016000206000506002016000506000898152602001908152602001600020600050600601600050600084815260200190815260200160002060005060000160005054115b156121355750805b60019190910190611fbd565b506004805460019081019182905560008281526003602090815260408083208054600160a060020a0319163390811782559401805434019055600160a060020a03939093168252600590522055565b50929998505050505050505050565b938201935b60019390930192610e5a565b5080611283565b505050565b600192909201916103f2565b5060005b600160005060008481526020019081526020016000206000506002016000506000838152602001908152602001600020600050600701600050548110156122ec5733600160a060020a0316600160005060008581526020019081526020016000206000506002016000506000848152602001908152602001600020600050600601600050600083815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a031614156122e45760006001600050600085815260200190815260200160002060005060020160005060008481526020019081526020016000206000506006016000506000838152602001908152602001600020600050600101600050819055505b6001016121cc565b60019190910190610401565b60008781526001602081815260408084208a85526002018252808420878552600601909152822001555b8391505b5095945050505050565b60008881526001602090815260408083208a84526002908101835281842088855260060190925282208054910154929350909161238891600160a060020a0391909116908a908a908686039061271090880204610e52565b60008981526001602090815260408083208b845260029081018352818420898552600601909252822001546123c991600160a060020a03919091169061053c565b0113156122f857600087815260016020908152604080832033600160a060020a031684526005019091528120600201549482900394610100900460ff16141561249157600160016000506000898152602001908152602001600020600050600501600050600033600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff02191690830217905550600160005060008881526020019081526020016000206000506006016000818150548092919060010191905055505b6000878152600160209081526040808320898452600281810184528285208886526006018452828520810154600160a060020a0316855260059190910190925282200154610100900460ff1614156125cb576001600160005060008981526020019081526020016000206000506005016000506000600160005060008b815260200190815260200160002060005060020160005060008a8152602001908152602001600020600050600601600050600087815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff02191690830217905550600160005060008881526020019081526020016000206000506006016000818150548092919060010191905055505b600087815260016020818152604080842033600160a060020a039081168652600582018085528387208d885280865284882080548a019055600293840186528488208b8952600601865284882080549188018054612710938c028490049003905580880180548b900390559384018054841689528287528589208f8a52875285892080548b9003905593549354909216875290935293209091018054928402919091049091019055612322565b60008881526001602090815260408083208a8452600290810183528184208885526004019092528220805491015492935090916126d091600160a060020a0391909116908a908a908690612710908202048603610e52565b60008981526001602090815260408083208b8452600290810183528184208985526004019092528220015461271191600160a060020a03919091169061053c565b0113156129bf57600087815260016020908152604080832033600160a060020a031684526005019091528120600201549482900394610100900460ff1614156127d957600160016000506000898152602001908152602001600020600050600501600050600033600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff02191690830217905550600160005060008881526020019081526020016000206000506006016000818150548092919060010191905055505b6000878152600160209081526040808320898452600281810184528285208886526004018452828520810154600160a060020a0316855260059190910190925282200154610100900460ff161415612913576001600160005060008981526020019081526020016000206000506005016000506000600160005060008b815260200190815260200160002060005060020160005060008a8152602001908152602001600020600050600401600050600087815260200190815260200160002060005060020160009054906101000a9004600160a060020a0316600160a060020a0316815260200190815260200160002060005060020160016101000a81548160ff02191690830217905550600160005060008881526020019081526020016000206000506006016000818150548092919060010191905055505b600087815260016020818152604080842033600160a060020a039081168652600582018085528387208d885280865284882080548a90039055600293840186528488208b8952600401865284882080549188018054612710938c0284900401905580880180548b900390559384018054841689528287528589208f8a52875285892080548b01905593549354909216875290935293209091018054928402919091049091039055612322565b60008781526001602081815260408084208a8552600201825280842087855260040190915282200155839150612326565b5090945092506127106000805b60008d81526001602090815260408083208f8452600201909152902060070154811015612b92576040600081812083825260060160205290812060010154118015612a9b575082600160005060008f815260200190815260200160002060005060020160005060008e815260200190815260200160002060005060060160005060008381526020019081526020016000206000506000016000505411155b15612b8a5760008d81526001602090815260408083208f8452600201825280832084845260060190915290205483901015612b2f57600091508150600160005060008e815260200190815260200160002060005060020160005060008d8152602001908152602001600020600050600601600050600082815260200190815260200160002060005060000160005054925082505b600160005060008e815260200190815260200160002060005060020160005060008d81526020019081526020016000206000506006016000506000828152602001908152602001600020600050600101600050548201915081505b6001016129fd565b50949b939a5098509296509094505050505056","info":{"source":"contract Market {\n\n  address admin = 0x18e79a47d8a58bef5aaecbba85ea1420649c64a8;\n\n  struct Order {\n    uint price;\n    uint size;\n    address user;\n  }\n  struct Option {\n    uint id;\n    bytes32 factHash;\n    address ethAddr;\n    uint strike;\n    mapping(uint => Order) buyOrders;\n    uint numBuyOrders;\n    mapping(uint => Order) sellOrders;\n    uint numSellOrders;\n  }\n  struct Position {\n    mapping(uint => int) positions;\n    int cash;\n    bool expired;\n    bool hasPosition;\n  }\n  struct OptionChain {\n    uint expiration;\n    string underlying;\n    mapping(uint => Option) options;\n    uint numOptions;\n    bool expired;\n    mapping(address => Position) positions;\n    uint numPositions;\n    uint numPositionsExpired;\n  }\n  mapping(uint => OptionChain) optionChains;\n  uint numOptionChains;\n  struct Account {\n    address user;\n    int capital;\n  }\n  mapping(uint => Account) accounts;\n  uint numAccounts;\n  mapping(address => uint) accountIDs; //starts at 1\n\n  function addFunds() {\n    if (accountIDs[msg.sender]>0) {\n      accounts[accountIDs[msg.sender]].capital += int(msg.value);\n    } else {\n      uint accountID = ++numAccounts;\n      accounts[accountID].user = msg.sender;\n      accounts[accountID].capital += int(msg.value);\n      accountIDs[msg.sender] = accountID;\n    }\n  }\n\n  function withdrawFunds(uint amount) {\n    if (accountIDs[msg.sender]>0) {\n      if (int(amount)<=getFunds(msg.sender, true)) {\n        accounts[accountIDs[msg.sender]].capital -= int(amount);\n        cancelOrders();\n        msg.sender.send(amount);\n      }\n    }\n  }\n\n  function getFunds(address user, bool onlyAvailable) constant returns(int) {\n    if (accountIDs[user]>0) {\n      if (onlyAvailable == false) {\n        return accounts[accountIDs[user]].capital;\n      } else {\n        return accounts[accountIDs[user]].capital + getMaxLossAfterTrade(user, 0, 0, 0, 0);\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  function getFundsAndAvailable(address user) constant returns(int, int) {\n    return (getFunds(user, false), getFunds(user, true));\n  }\n\n  function getOptionChain(uint optionChainID) constant returns (uint, string) {\n    return (optionChains[optionChainID].expiration, optionChains[optionChainID].underlying);\n  }\n\n  function getMarket(address user) constant returns(uint[], uint[], uint[], int[], int[]) {\n    uint[] memory optionIDs = new uint[](30);\n    uint[] memory strikes = new uint[](30);\n    uint[] memory ids = new uint[](30);\n    int[] memory positions = new int[](30);\n    int[] memory cashes = new int[](30);\n    uint z = 0;\n    for (int optionChainID=int(numOptionChains)-1; optionChainID>=0 && z<30; optionChainID--) {\n      if (optionChains[uint(optionChainID)].expired == false) {\n        for (uint optionID=0; optionID<optionChains[uint(optionChainID)].numOptions; optionID++) {\n          optionIDs[z] = uint(optionChainID)*1000 + optionID;\n          strikes[z] = optionChains[uint(optionChainID)].options[optionID].strike;\n          ids[z] = optionChains[uint(optionChainID)].options[optionID].id;\n          positions[z] = optionChains[uint(optionChainID)].positions[user].positions[optionID];\n          cashes[z] = optionChains[uint(optionChainID)].positions[user].cash;\n          z++;\n        }\n      }\n    }\n    return (optionIDs, strikes, ids, positions, cashes);\n  }\n\n  function getMarketTopLevels() constant returns(uint[], uint[], uint[], uint[]) {\n    uint[] memory buyPrices = new uint[](30);\n    uint[] memory buySizes = new uint[](30);\n    uint[] memory sellPrices = new uint[](30);\n    uint[] memory sellSizes = new uint[](30);\n    uint z = 0;\n    for (int optionChainID=int(numOptionChains)-1; optionChainID>=0 && z<30; optionChainID--) {\n      if (optionChains[uint(optionChainID)].expired == false) {\n        for (uint optionID=0; optionID<optionChains[uint(optionChainID)].numOptions; optionID++) {\n          (buyPrices[z], buySizes[z], sellPrices[z], sellSizes[z]) = getTopLevel(uint(optionChainID), optionID);\n          z++;\n        }\n      }\n    }\n    return (buyPrices, buySizes, sellPrices, sellSizes);\n  }\n\n  function expire(uint accountID, uint optionChainID, uint8[] v, bytes32[] r, bytes32[] s, uint[] value) {\n    bool allSigned = true;\n    if (optionChains[optionChainID].expired == false) {\n      for (uint optionID=0; optionID<optionChains[optionChainID].numOptions; optionID++) {\n        address signerAddress = ecrecover(sha3(optionChains[optionChainID].options[optionID].factHash, value[optionID]), v[optionID], r[optionID], s[optionID]);\n        if (signerAddress != optionChains[optionChainID].options[optionID].ethAddr) {\n          allSigned = false;\n        }\n      }\n      if (allSigned) {\n        uint lastAccount = numAccounts;\n        if (accountID==0) {\n          accountID = 1;\n        } else {\n          lastAccount = accountID;\n        }\n        for (accountID=accountID; accountID<=lastAccount; accountID++) {\n          if (optionChains[optionChainID].positions[accounts[accountID].user].expired == false) {\n            int result = optionChains[optionChainID].positions[accounts[accountID].user].cash;\n            for (optionID=0; optionID<optionChains[optionChainID].numOptions; optionID++) {\n              result += (int(value[optionID]) * optionChains[optionChainID].positions[accounts[accountID].user].positions[optionID]);\n            }\n            accounts[accountID].capital = accounts[accountID].capital + result;\n            optionChains[optionChainID].positions[accounts[accountID].user].expired = true;\n            optionChains[optionChainID].numPositionsExpired++;\n          }\n        }\n        if (optionChains[optionChainID].numPositionsExpired == optionChains[optionChainID].numPositions) {\n          optionChains[optionChainID].expired = true;\n        }\n      }\n    }\n  }\n\n  function addOptionChain(uint existingOptionChainID, uint expiration, string underlying, uint[] ids, uint[] strikes, bytes32[] factHashes, address[] ethAddrs) {\n    if (msg.sender==admin) {\n      uint optionChainID = 6;\n      if (numOptionChains<6) {\n        optionChainID = numOptionChains++;\n      } else {\n        for (uint i=0; i < numOptionChains && optionChainID>=6; i++) {\n          if (optionChains[i].expired==true || optionChains[i].numOptions==0) {\n            optionChainID = i;\n          }\n        }\n      }\n      if (optionChainID<6) {\n        if (existingOptionChainID<6) {\n          optionChainID = existingOptionChainID;\n        } else {\n          delete optionChains[optionChainID];\n        }\n        OptionChain optionChain = optionChains[optionChainID];\n        optionChain.expiration = expiration;\n        optionChain.underlying = underlying;\n        for (i=0; i < strikes.length; i++) {\n          if (optionChain.numOptions<5) {\n            uint optionID = optionChain.numOptions++;\n            Option option = optionChain.options[i];\n            option.id = ids[i];\n            option.strike = strikes[i];\n            option.factHash = factHashes[i];\n            option.ethAddr = ethAddrs[i];\n            optionChain.options[i] = option;\n          }\n        }\n      }\n    }\n  }\n\n  function placeBuyOrder(uint optionChainID, uint optionID, uint price, uint size) {\n    if (size % 10000 != 0) {\n      size -= size % 10000;\n    }\n    if (getFunds(msg.sender, false)+getMaxLossAfterTrade(msg.sender, optionChainID, optionID, int(size), -int(size * price / 10000))>0) {\n      bool foundMatch = true;\n      while (foundMatch && size>0) {\n        int bestPriceID = -1;\n        for (uint i=0; i<optionChains[optionChainID].options[optionID].numSellOrders; i++) {\n          if (optionChains[optionChainID].options[optionID].sellOrders[i].price<=price && optionChains[optionChainID].options[optionID].sellOrders[i].size>0 && (bestPriceID<0 || optionChains[optionChainID].options[optionID].sellOrders[i].price<optionChains[optionChainID].options[optionID].sellOrders[uint(bestPriceID)].price)) {\n            bestPriceID = int(i);\n          }\n        }\n        if (bestPriceID<0) {\n          foundMatch = false;\n        } else {\n          size = orderMatchBuy(optionChainID, optionID, price, size, uint(bestPriceID));\n        }\n      }\n      if (size>0) {\n        uint orderID = 5;\n        if (optionChains[optionChainID].options[optionID].numBuyOrders < 5) {\n          orderID = optionChains[optionChainID].options[optionID].numBuyOrders++;\n        } else {\n          for (i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders && (orderID>=5 || optionChains[optionChainID].options[optionID].buyOrders[orderID].size!=0); i++) {\n            if (optionChains[optionChainID].options[optionID].buyOrders[i].size==0) {\n              orderID = i;\n            } else if (optionChains[optionChainID].options[optionID].buyOrders[i].price<price && (orderID>=5 || (optionChains[optionChainID].options[optionID].buyOrders[i].price<optionChains[optionChainID].options[optionID].buyOrders[orderID].price))) {\n              orderID = i;\n            }\n          }\n        }\n        if (orderID<5) {\n          optionChains[optionChainID].options[optionID].buyOrders[orderID] = Order(price, size, msg.sender);\n        }\n      }\n    }\n  }\n\n  function placeSellOrder(uint optionChainID, uint optionID, uint price, uint size) {\n    if (size % 10000 != 0) {\n      size -= size % 10000;\n    }\n    if (getFunds(msg.sender, false)+getMaxLossAfterTrade(msg.sender, optionChainID, optionID, -int(size), int(size * price / 10000))>0) {\n      bool foundMatch = true;\n      while (foundMatch && size>0) {\n        int bestPriceID = -1;\n        for (uint i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders; i++) {\n          if (optionChains[optionChainID].options[optionID].buyOrders[i].price>=price && optionChains[optionChainID].options[optionID].buyOrders[i].size>0 && (bestPriceID<0 || optionChains[optionChainID].options[optionID].buyOrders[i].price>optionChains[optionChainID].options[optionID].buyOrders[uint(bestPriceID)].price)) {\n            bestPriceID = int(i);\n          }\n        }\n        if (bestPriceID<0) {\n          foundMatch = false;\n        } else {\n          size = orderMatchSell(optionChainID, optionID, price, size, uint(bestPriceID));\n        }\n      }\n      if (size>0) {\n        uint orderID = 5;\n        if (optionChains[optionChainID].options[optionID].numSellOrders < 5) {\n          orderID = optionChains[optionChainID].options[optionID].numSellOrders++;\n        } else {\n          for (i=0; i<optionChains[optionChainID].options[optionID].numSellOrders && (orderID>=5 || optionChains[optionChainID].options[optionID].sellOrders[orderID].size!=0); i++) {\n            if (optionChains[optionChainID].options[optionID].sellOrders[i].size==0) {\n              orderID = i;\n            } else if (optionChains[optionChainID].options[optionID].sellOrders[i].price>price && (orderID>=5 || (optionChains[optionChainID].options[optionID].sellOrders[i].price>optionChains[optionChainID].options[optionID].sellOrders[orderID].price))) {\n              orderID = i;\n            }\n          }\n        }\n        if (orderID<5) {\n          optionChains[optionChainID].options[optionID].sellOrders[orderID] = Order(price, size, msg.sender);\n        }\n      }\n    }\n  }\n\n  function orderMatchBuy(uint optionChainID, uint optionID, uint price, uint size, uint bestPriceID) private returns(uint) {\n    uint sizeChange = min(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size, size);\n    if (getFunds(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user, false)+getMaxLossAfterTrade(optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user, optionChainID, optionID, -int(sizeChange), int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000))>0) {\n      size -= sizeChange;\n      if (optionChains[optionChainID].positions[msg.sender].hasPosition == false) {\n        optionChains[optionChainID].positions[msg.sender].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      if (optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].hasPosition == false) {\n        optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      optionChains[optionChainID].positions[msg.sender].positions[optionID] += int(sizeChange);\n      optionChains[optionChainID].positions[msg.sender].cash -= int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000);\n      optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size -= sizeChange;\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].positions[optionID] -= int(sizeChange);\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].user].cash += int(sizeChange * optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].price / 10000);\n    } else {\n      optionChains[optionChainID].options[optionID].sellOrders[bestPriceID].size = 0;\n    }\n    return size;\n  }\n\n  function orderMatchSell(uint optionChainID, uint optionID, uint price, uint size, uint bestPriceID) private returns(uint) {\n    uint sizeChange = min(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size, size);\n    if (getFunds(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user, false)+getMaxLossAfterTrade(optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user, optionChainID, optionID, int(sizeChange), -int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000))>0) {\n      size -= sizeChange;\n      if (optionChains[optionChainID].positions[msg.sender].hasPosition == false) {\n        optionChains[optionChainID].positions[msg.sender].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      if (optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].hasPosition == false) {\n        optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].hasPosition = true;\n        optionChains[optionChainID].numPositions++;\n      }\n      optionChains[optionChainID].positions[msg.sender].positions[optionID] -= int(sizeChange);\n      optionChains[optionChainID].positions[msg.sender].cash += int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000);\n      optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size -= sizeChange;\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].positions[optionID] += int(sizeChange);\n      optionChains[optionChainID].positions[optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].user].cash -= int(sizeChange * optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].price / 10000);\n    } else {\n      optionChains[optionChainID].options[optionID].buyOrders[bestPriceID].size = 0;\n    }\n    return size;\n  }\n\n  function getTopLevel(uint optionChainID, uint optionID) private constant returns(uint, uint, uint, uint) {\n    uint buyPrice = 0;\n    uint buySize = 0;\n    uint sellPrice = 0;\n    uint sellSize = 0;\n    uint watermark = 0;\n    uint size = 0;\n    for (uint i=0; i<optionChains[optionChainID].options[optionID].numBuyOrders; i++) {\n      if (optionChains[optionChainID].options[optionID].buyOrders[i].size>0 && optionChains[optionChainID].options[optionID].buyOrders[i].price>=watermark) {\n        if (optionChains[optionChainID].options[optionID].buyOrders[i].price>watermark) {\n          size = 0;\n          watermark = optionChains[optionChainID].options[optionID].buyOrders[i].price;\n        }\n        size += optionChains[optionChainID].options[optionID].buyOrders[i].size;\n      }\n    }\n    buyPrice = watermark;\n    buySize = size;\n    watermark = 10000;\n    size = 0;\n    for (i=0; i<optionChains[optionChainID].options[optionID].numSellOrders; i++) {\n      if (optionChains[optionChainID].options[optionID].sellOrders[i].size>0 && optionChains[optionChainID].options[optionID].sellOrders[i].price<=watermark) {\n        if (optionChains[optionChainID].options[optionID].sellOrders[i].price<watermark) {\n          size = 0;\n          watermark = optionChains[optionChainID].options[optionID].sellOrders[i].price;\n        }\n        size += optionChains[optionChainID].options[optionID].sellOrders[i].size;\n      }\n    }\n    sellPrice = watermark;\n    sellSize = size;\n    return (buyPrice, buySize, sellPrice, sellSize);\n  }\n\n  function cancelOrders() {\n    for (uint optionChainID=0; optionChainID<numOptionChains; optionChainID++) {\n      for (uint i=0; i<optionChains[optionChainID].numOptions; i++) {\n        for (uint j=0; j<optionChains[optionChainID].options[i].numBuyOrders; j++) {\n          if (optionChains[optionChainID].options[i].buyOrders[j].user==msg.sender) {\n            optionChains[optionChainID].options[i].buyOrders[j].size = 0;\n          }\n        }\n        for (j=0; j<optionChains[optionChainID].options[i].numSellOrders; j++) {\n          if (optionChains[optionChainID].options[i].sellOrders[j].user==msg.sender) {\n            optionChains[optionChainID].options[i].sellOrders[j].size = 0;\n          }\n        }\n      }\n    }\n  }\n\n  function getMaxLossAfterTrade(address user, uint optionChainID, uint optionID, int positionChange, int cashChange) constant returns(int) {\n    int totalMaxLoss = 0;\n    for (uint i=0; i<numOptionChains; i++) {\n      if (optionChains[i].expired == false) {\n        int maxLoss = 0;\n        int pnl = optionChains[i].positions[user].cash;\n        if (i==optionChainID) {\n          pnl += cashChange;\n        }\n        maxLoss = pnl;\n        for (uint j=0; j<optionChains[i].numOptions; j++) {\n          pnl += optionChains[i].positions[user].positions[j];\n          if (i==optionChainID && j==optionID) {\n            pnl += positionChange;\n          }\n          if (pnl<maxLoss) {\n            maxLoss = pnl;\n          }\n        }\n        totalMaxLoss += maxLoss;\n      }\n    }\n    return totalMaxLoss;\n  }\n\n  function changeAdmin(address newAdmin) {\n    if (msg.sender == admin) {\n      admin = newAdmin;\n    }\n  }\n\n  function min(uint a, uint b) constant returns(uint) {\n    if (a<b) {\n      return a;\n    } else {\n      return b;\n    }\n  }\n}\n","language":"Solidity","languageVersion":"0.2.0","compilerVersion":"0.2.0","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /var/folders/sj/bz257rsj0w1g7cpjjycd7wpw0000gn/T/solc555606916","abiDefinition":[{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"withdrawFunds","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"optionChainID","type":"uint256"}],"name":"getOptionChain","outputs":[{"name":"","type":"uint256"},{"name":"","type":"string"}],"type":"function"},{"constant":false,"inputs":[{"name":"accountID","type":"uint256"},{"name":"optionChainID","type":"uint256"},{"name":"v","type":"uint8[]"},{"name":"r","type":"bytes32[]"},{"name":"s","type":"bytes32[]"},{"name":"value","type":"uint256[]"}],"name":"expire","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"cancelOrders","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"},{"name":"onlyAvailable","type":"bool"}],"name":"getFunds","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"price","type":"uint256"},{"name":"size","type":"uint256"}],"name":"placeSellOrder","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"a","type":"uint256"},{"name":"b","type":"uint256"}],"name":"min","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"newAdmin","type":"address"}],"name":"changeAdmin","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"addFunds","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"existingOptionChainID","type":"uint256"},{"name":"expiration","type":"uint256"},{"name":"underlying","type":"string"},{"name":"ids","type":"uint256[]"},{"name":"strikes","type":"uint256[]"},{"name":"factHashes","type":"bytes32[]"},{"name":"ethAddrs","type":"address[]"}],"name":"addOptionChain","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getMarket","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"int256[]"},{"name":"","type":"int256[]"}],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getFundsAndAvailable","outputs":[{"name":"","type":"int256"},{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[],"name":"getMarketTopLevels","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"}],"type":"function"},{"constant":false,"inputs":[{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"price","type":"uint256"},{"name":"size","type":"uint256"}],"name":"placeBuyOrder","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"},{"name":"optionChainID","type":"uint256"},{"name":"optionID","type":"uint256"},{"name":"positionChange","type":"int256"},{"name":"cashChange","type":"int256"}],"name":"getMaxLossAfterTrade","outputs":[{"name":"","type":"int256"}],"type":"function"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}}}